;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet expr-vlfeat (func)
        (deflocal i)

        (lmatch remove func "vl-")
        (for i in (expr-vlfeat-table) do
                until (= <i 0> func) )
        (= <i 0> func)
        (exprseq-basic <i 1> <i 2> (+ "trp_vl_" (dash->underscore func) "(") ")")
        (flag-true "vlfeat") )

(defun expr-vlfeat-table ()
        [ [ "version"                   0 0 ]
          [ "configuration"             0 0 ]
          [ "get-simd-enabled"          0 0 ]
          [ "cpu-has-sse2"              0 0 ]
          [ "cpu-has-sse3"              0 0 ]
          [ "cpu-has-avx"               0 0 ]
          [ "sift-new"                  5 5 ]
          [ "sift-get-octave-index"     1 1 ]
          [ "sift-get-noctaves"         1 1 ]
          [ "sift-get-octave-first"     1 1 ]
          [ "sift-get-octave-width"     1 1 ]
          [ "sift-get-octave-height"    1 1 ]
          [ "sift-get-nlevels"          1 1 ]
          [ "sift-get-nkeypoints"       1 1 ]
          [ "sift-get-peak-thresh"      1 1 ]
          [ "sift-get-edge-thresh"      1 1 ]
          [ "sift-get-norm-thresh"      1 1 ]
          [ "sift-get-magnif"           1 1 ]
          [ "sift-get-window-size"      1 1 ]
          [ "sift-get-gss"              2 2 ]
          [ "sift-match"                3 4 ]
        ] )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

