;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(include "test-gtk.tin")
(include "test-iup.tin")
(include "test-thread.tin")
(include "test-gcrypt.tin")
(include "test-chess.tin")
(include "test-suf.tin")
(include "test-aud.tin")
(include "test-vid.tin")
(include "test-avi.tin")
(include "test-pix.tin")
(include "test-curl.tin")
(include "test-sqlite3.tin")
(include "test-avcodec.tin")
(include "test-cv.tin")
(include "test-magic.tin")
(include "test-mgl.tin")
(include "test-lept.tin")
(include "test-sdl.tin")
(include "test-cairo.tin")
(include "test-microhttpd.tin")
(include "test-qoi.tin")
(include "test-webp.tin")
(include "test-openjp2.tin")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet testseq ()
        (repeat (next-token)
                (token-retract)
                until (<> _token "aperta")
                (test) ))

(defnet exprseq-ext (a b pre post)
        (exprseq a b pre post)
        (if (last-pass)
        then    (fprint _dst "goto l" _labfail ';' nl) ))

(defnet test ()
        (deflocal name predefined)

        (next-token)
        (= _token "aperta")
        (next-token)
        (case _token of
                "relop"                 (test-relop _tokenval)
                "identificatore"        (seq    (set name _tokenval)
                                                (set predefined true)
                                                (alt    (test-gtk name)
                                                        (test-iup name)
                                                        (test-thread name)
                                                        (test-gcrypt name)
                                                        (test-chess name)
                                                        (test-suf name)
                                                        (test-aud name)
                                                        (test-vid name)
                                                        (test-avi name)
                                                        (test-pix name)
                                                        (test-curl name)
                                                        (test-sqlite3 name)
                                                        (test-avcodec name)
                                                        (test-cv name)
                                                        (test-magic name)
                                                        (test-mgl name)
                                                        (test-lept name)
                                                        (test-sdl name)
                                                        (test-cairo name)
                                                        (test-microhttpd name)
                                                        (test-qoi name)
                                                        (test-webp name)
                                                        (test-openjp2 name)
                                                        (test-func name)
                                                        (seq    (token-push "stringa" name)
                                                                (test-callparse)
                                                                (set predefined false) ))
                                                ;(if (and predefined (last-pass))
                                                ;then    (if (<> <_net name> undef)
                                                ;        then    (print "warning: net `" name "' is a predefined net" nl) ))
                                                )
                default                 (syntax-error) ))

(defnet test-relop (func)
        (deflocal code cst val code2)

        (set _expr_const_enabled _expr_const_optimize)
        (set _expr_code "")
        (expr-basic)
        (set code _expr_code)
        (set cst _expr_const)
        (set val _expr_const_val)
        (set _expr_const_enabled (and cst _expr_const_optimize))
        (set _expr_code "")
        (expr-basic)
        (if _expr_const
        then    (case func of
                        "equ"   (set func (= val _expr_const_val))
                        "neq"   (set func (<> val _expr_const_val))
                        "min"   (set func (< val _expr_const_val))
                        "minequ"(set func (<= val _expr_const_val))
                        "mag"   (set func (> val _expr_const_val))
                        "magequ"(set func (>= val _expr_const_val)) )
                (if (not (booleanp func))
                then    (error "invalid parameters of relational operator") )
                (if (not func)
                then    (if (last-pass)
                        then    (fprint _dst "  goto l" _labfail ';' nl) ))
        else    (case func of
                        "equ"   (set func "equal")
                        "neq"   (set func "notequal")
                        "min"   (set func "less")
                        "minequ"(set func "less_or_equal")
                        "mag"   (set func "greater")
                        "magequ"(set func "greater_or_equal") )
                (set code2 _expr_code)
                (if cst
                then    (set _expr_const_enabled false)
                        (set _expr_code "")
                        (expr-constant val)
                        (set code _expr_code) )
                (if (last-pass)
                then    (fprint _dst "  if(trp_" func '(' code ',' code2 ")!=TRP_TRUE)goto l" _labfail ';' nl) ))
        (chiusa) )

(defnet test-func (func)
        (case func of
                "exit"          (exprseq 0 1 "  trp_exit(" ");\n")
                "success"       (chiusa)
                "fail"          (seq    (chiusa)
                                        (if (last-pass)
                                        then    (fprint _dst "  goto l" _labfail ';' nl) ))
                "skip"          (test-skip)
                "segfault"      (exprseq 0 0 "  trp_segfault(" ");\n")
                "clr"           (test-clr)
                "set"           (test-set)
                "inc"           (test-incdec "inc" "cat")
                "dec"           (test-incdec "dec" "math_minus")

                "or"            (test-or)
                "and"           (test-and)
                "not"           (seq    (set _expr_const_enabled _expr_const_optimize)
                                        (set _expr_code "")
                                        (expr-basic)
                                        (if _expr_const
                                        then    (if (not (booleanp _expr_const_val))
                                                then    (error "`not' requires a boolean expression") )
                                                (if _expr_const_val
                                                then    (if (last-pass)
                                                        then    (fprint _dst "  goto l" _labfail ';' nl) ))
                                        else    (if (last-pass)
                                                then    (fprint _dst "  if((" _expr_code ")==TRP_TRUE)goto l" _labfail ';' nl) ))
                                        (chiusa) )

                "integerp"      (exprseq-ext 1 1 "  if(trp_integerp(" ")!=TRP_TRUE)")
                "rationalp"     (exprseq-ext 1 1 "  if(trp_rationalp(" ")!=TRP_TRUE)")
                "complexp"      (exprseq-ext 1 1 "  if(trp_complexp(" ")!=TRP_TRUE)")
                "stringp"       (exprseq-ext 1 1 "  if(((" ")->tipo)!=TRP_CORD)")
                "rawp"          (exprseq-ext 1 1 "  if(((" ")->tipo)!=TRP_RAW)")
                "listp"         (exprseq-ext 1 1 "  if(trp_listp(" ")!=TRP_TRUE)")
                "booleanp"      (exprseq-ext 1 1 "  if(trp_booleanp(" ")!=TRP_TRUE)")
                "charp"         (exprseq-ext 1 1 "  if(((" ")->tipo)!=TRP_CHAR)")
                "datep"         (exprseq-ext 1 1 "  if(((" ")->tipo)!=TRP_DATE)")
                "queuep"        (exprseq-ext 1 1 "  if(((" ")->tipo)!=TRP_QUEUE)")
                "arrayp"        (exprseq-ext 1 1 "  if(((" ")->tipo)!=TRP_ARRAY)")
                "assocp"        (exprseq-ext 1 1 "  if(((" ")->tipo)!=TRP_ASSOC)")
                "treep"         (exprseq-ext 1 1 "  if(((" ")->tipo)!=TRP_TREE)")
                "pixp"          (exprseq-ext 1 1 "  if(((" ")->tipo)!=TRP_PIX)")
                "threadp"       (exprseq-ext 1 1 "  if(((" ")->tipo)!=TRP_THREAD)")
                "gtkp"          (exprseq-ext 1 1 "  if(((" ")->tipo)!=TRP_GTK)")
                "audp"          (exprseq-ext 1 1 "  if(((" ")->tipo)!=TRP_AUD)")
                "vidp"          (exprseq-ext 1 1 "  if(((" ")->tipo)!=TRP_VID)")

                "gc"            (exprseq 0 0 "  trp_gc(" ");\n")
                "link"          (exprseq-ext 2 2 "  if(trp_link(" "))")
                "symlink"       (exprseq-ext 2 2 "  if(trp_symlink(" "))")
                "sync"          (exprseq 0 0 "  trp_sync(" ");\n")
                "close"         (exprseq-ext 1 undef "  if(trp_close_multi(" "))")
                "call"          (test-callparse)
                "print"         (exprseq-ext 1 undef "  if(trp_print(" "))")
                "fprint"        (exprseq-ext 2 undef "  if(trp_fprint(" "))")
                "push"          (exprseq-ext 2 2 "  if(trp_stack_push(" "))")
                "chdir"         (exprseq-ext 1 1 "  if(trp_chdir(" "))")
                "mkdir"         (exprseq-ext 1 1 "  if(trp_mkdir(" "))")
                "mkfifo"        (exprseq-ext 1 1 "  if(trp_mkfifo(" "))")
                "remove"        (exprseq-ext 1 1 "  if(trp_remove(" "))")
                "rename"        (exprseq-ext 2 2 "  if(trp_rename(" "))")
                "system"        (exprseq-ext 1 undef "  if(trp_system(" ")!=ZERO)")
                "sleep"         (exprseq-ext 1 1 "  if(trp_sleep(" "))")
                "pathexists"    (exprseq-ext 1 1 "  if(trp_pathexists(" ")!=TRP_TRUE)")
                "utime"         (exprseq-ext 2 3 "  if(trp_utime(" "))")
                "fsetpos"       (exprseq-ext 2 2 "  if(trp_file_set_pos(" "))")
                "fflush"        (exprseq-ext 1 1 "  if(trp_file_flush(" "))")
                "in"            (test-in)
                "if"            (test-if)
                "case"          (test-case)
                "repeat"        (test-repeat)
                "while"         (test-while)
                "for"           (test-for)
                "seq"           (seq    (testseq)
                                        (chiusa) )
                "alt"           (test-alt)
                "opt"           (test-opt)
                "opt*"          (test-opt*)
                "queue-put"     (exprseq-ext 2 2 "  if(trp_queue_put(" "))")
                "search"        (test-search)
                "lmatch"        (test-match 0)
                "rmatch"        (test-match 1)
                "ltrim"         (test-trim 'l')
                "rtrim"         (test-trim 'r')
                "set-lang"      (if (and (= _pass 2) (= (length _ml_cst) 0))
                                then    (set _pass 1)
                                        (exprseq-ext 1 1 undef undef)
                                        (set _pass 2)
                                else    (exprseq-ext 1 1 "  if(trp_set_lang(" "))") )
                "set-rndseed"   (exprseq-ext 1 1 "  if(trp_math_set_seed(" "))")
                "set-precision" (exprseq-ext 1 1 "  if(trp_math_set_prec(" "))")
                "set-cprecision"(seq    (set _expr_const_enabled true)
                                        (set _expr_code "")
                                        (expr-basic)
                                        (if (or (not _expr_const)
                                                (not (rationalp _expr_const_val)) )
                                        then    (error "`set-cprecision' requires a constant") )
                                        (if (<> _expr_const_val (precision))
                                        then    (if (<> (precision) (default-math-precision))
                                                then    (error "too much calls to `set-cprecision'") )
                                                (set-precision _expr_const_val) )
                                        (chiusa) )
                "set-icon"      (seq    (set _expr_const_enabled true)
                                        (set _expr_code "")
                                        (expr-basic)
                                        (if (or (not _expr_const)
                                                (not (stringp _expr_const_val)) )
                                        then    (error "`set-icon' requires a constant") )
                                        (if (= _icon undef)
                                        then    (set _icon (search-path-default _expr_const_val))
                                                (if (not (pathexists _icon))
                                                then    (error "`set-icon': file not found") ))
                                        (chiusa) )
                "sort"          (exprseq-ext 1 2 "  if(trp_array_sort(" "))")
                "quicksort"     (exprseq-ext 1 2 "  if(trp_array_quicksort(" "))")
                "heapsort"      (exprseq-ext 1 2 "  if(trp_array_heapsort(" "))")
                "mergesort"     (exprseq-ext 1 2 "  if(trp_array_mergesort(" "))")
                "array-insert"  (exprseq-ext 3 undef "  if(trp_array_insert(" "))")
                "array-append"  (seq    (if (last-pass)
                                        then    (fprint _dst "  if(trp_array_insert(") )
                                        (expr)
                                        (exprseq-ext 1 undef ",NULL," "))") )
                "array-remove"  (exprseq-ext 2 3 "  if(trp_array_remove(" "))")

                "assoc-set"     (exprseq-ext 3 3 "  if(trp_assoc_set(" "))")
                "assoc-inc"     (exprseq-ext 2 3 "  if(trp_assoc_inc(" "))")
                "assoc-clr"     (exprseq-ext 2 2 "  if(trp_assoc_clr(" "))")
                "regexec"       (exprseq-ext 2 2 "  if(trp_regexec_test(" "))")
                "fibo-decrease-key"
                                (exprseq-ext 3 3 "  if(trp_fibo_decrease_key(" "))")
                "fibo-delete"   (exprseq-ext 2 2 "  if(trp_fibo_delete(" "))")
                "fibo-set-key"  (exprseq-ext 3 3 "  if(trp_fibo_set_key(" "))")

                default         (fail) ))

(defnet test-skip ()
        (repeat (next-token)
                until (= _token "chiusa")
                (token-retract)
                (if (last-pass)
                then    (fprint _dst "  trp_skip(") )
                (expr)
                (if (last-pass)
                then    (fprint _dst ");" nl) )))

(defnet test-clr ()
        (repeat (next-token)
                until (= _token "chiusa")
                (if (<> _token "identificatore")
                then    (error "identifier expected") )
                (not-predefined)
                (if (last-pass)
                then    (fprint _dst "  ") )
                (expr-ident)
                (if (last-pass)
                then    (fprint _dst "=UNDEF;" nl) )))

(defnet test-set ()
        (next-token)
        (if (<> _token "identificatore")
        then    (if (or (<> _token "relop") (<> _tokenval "min"))
                then    (error "invalid assignment") )
                (if (last-pass)
                then    (fprint _dst "  if(trp_array_set_multi(") )
                (expr)
                (virgola)
                (expr)
                (repeat (next-token)
                        until (and (= _token "relop") (= _tokenval "mag"))
                        (virgola)
                        (token-retract)
                        (expr) )
                (exprseq-ext 1 1 ',' ",NULL))")
        else    (not-predefined)
                (if (last-pass)
                then    (fprint _dst "  ") )
                (expr-ident)
                (if (last-pass)
                then    (fprint _dst '=') )
                (expr)
                (if (last-pass)
                then    (fprint _dst ';' nl) )
                (chiusa) ))

(defnet test-incdec (opmulti opsingle)
        (next-token)
        (if (<> _token "identificatore")
        then    (if (or (<> _token "relop") (<> _tokenval "min"))
                then    (error "invalid increment") )
                (if (last-pass)
                then    (fprint _dst "  if(trp_array_" opmulti "_multi(") )
                (expr)
                (virgola)
                (expr)
                (repeat (next-token)
                        (virgola)
                        until (and (= _token "relop") (= _tokenval "mag"))
                        (token-retract)
                        (expr) )
                (if (last-pass)
                then    (fprint _dst "NULL,") )
                (exprseq-ext 0 undef undef "))")
        else    (not-predefined)
                (set _expr_const_enabled false)
                (set _expr_code "")
                (expr-ident-basic)
                (if (last-pass)
                then    (fprint _dst "  " _expr_code "=trp_" opsingle "(" _expr_code ',') )
                (next-token)
                (if (= _token "chiusa")
                then    (if (last-pass)
                        then    (fprint _dst "UNO,NULL);\n") )
                else    (token-retract)
                        (exprseq 1 undef undef ");\n") )))

(defnet test-or ()
        (deflocal labsucc succ q)

        (inc _label)
        (set labsucc _label)
        (set succ false)
        (set q (queue))
        (repeat (next-token)
                until (= _token "chiusa")
                (token-retract)
                (set _expr_const_enabled _expr_const_optimize)
                (set _expr_code "")
                (expr-basic)
                (if _expr_const
                then    (if (not (booleanp _expr_const_val))
                        then    (error "`or' requires a boolean expression") )
                        (if _expr_const_val
                        then    (set succ true)
                                (skip-element)
                                (token-push "chiusa" undef) )
                else    (if (last-pass)
                        then    (queue-put q (+ "  if((" _expr_code ")==TRP_TRUE)goto l" labsucc ';' nl)) )))
        (if succ
        then    (inc _label -1)
        else    (if (last-pass)
                then    (fprint _dst (sprintl q)
                                     "  goto l" _labfail ';' nl ))
                (if (= (length q) 0)
                then    (inc _label -1)
                else    (if (last-pass)
                        then    (fprint _dst
                                     'l' labsucc ':' nl )))))

(defnet test-and ()
        (deflocal fail q)

        (set fail false)
        (set q (queue))
        (repeat (next-token)
                until (= _token "chiusa")
                (token-retract)
                (set _expr_const_enabled _expr_const_optimize)
                (set _expr_code "")
                (expr-basic)
                (if _expr_const
                then    (if (not (booleanp _expr_const_val))
                        then    (error "`and' requires a boolean expression") )
                        (if (not _expr_const_val)
                        then    (set fail true)
                                (skip-element)
                                (token-push "chiusa" undef) )
                else    (if (last-pass)
                        then    (queue-put q (+ "  if((" _expr_code ")!=TRP_TRUE)goto l" _labfail ';' nl)) )))
        (if (last-pass)
        then    (if fail
                then    (fprint _dst "goto l" _labfail ';' nl)
                else    (fprint _dst (sprintl q)) )))

(defnet test-search ()
        (deflocal ignorecase)

        (next-token)
        (if (and (= _token "identificatore") (= _tokenval "case"))
        then    (set ignorecase 1)
        else    (set ignorecase 0)
                (token-retract) )
        (if (last-pass)
        then    (fprint _dst "  if(trp_cord_search_test(" ignorecase ',') )
        (expr)
        (virgola)
        (expr)
        (virgola)
        (next-token)
        (if (= _token "chiusa")
        then    (if (last-pass)
                then    (fprint _dst "NULL,NULL") )
        else    (if (<> _token "identificatore")
                then    (error "identifier expected") )
                (not-predefined)
                (if (last-pass)
                then    (fprint _dst "&(") )
                (expr-ident)
                (if (last-pass)
                then    (fprint _dst "),") )
                (next-token)
                (if (= _token "chiusa")
                then    (if (last-pass)
                        then    (fprint _dst "NULL") )
                else    (token-retract)
                        (expr)
                        (chiusa) ))
        (if (last-pass)
        then    (fprint _dst "))goto l" _labfail ';' nl) ))

(defnet test-match (flags)
        (deflocal ic rm st stx)

        (set ic false)
        (set rm false)
        (repeat (next-token)
                until (<> _token "identificatore")
                until (and (<> _tokenval "case")
                           (<> _tokenval "remove")
                           (<> _tokenval "set")
                           (<> _tokenval "setidx") )
                (case _tokenval of
                        "case"  (set ic true)
                        "remove"(set rm true)
                        "set"   (seq    (if (<> st undef)
                                        then    (error "too much 'set's in 'match' test") )
                                        (next-token)
                                        (if (<> _token "identificatore")
                                        then    (error "identifier expected") )
                                        (not-predefined)
                                        (set st _tokenval) )
                        "setidx"(seq    (if (<> stx undef)
                                        then    (error "too much 'setidx's in 'match' test") )
                                        (next-token)
                                        (if (<> _token "identificatore")
                                        then    (error "identifier expected") )
                                        (not-predefined)
                                        (set stx _tokenval) )))
        (if ic
        then    (set flags (+ flags 2)) )
        (if rm
        then    (set flags (+ flags 4)) )
        (if (last-pass)
        then    (fprint _dst "  if(trp_cord_match_test(" flags ',') )
        (if (= st undef)
        then    (if (last-pass)
                then    (fprint _dst "NULL") )
        else    (token-retract)
                (token-push "identificatore" st)
                (next-token)
                (if (last-pass)
                then    (fprint _dst "&(") )
                (expr-ident)
                (if (last-pass)
                then    (fprint _dst ')') )
                (next-token) )
        (virgola)
        (if (= stx undef)
        then    (if (last-pass)
                then    (fprint _dst "NULL") )
        else    (token-retract)
                (token-push "identificatore" stx)
                (next-token)
                (if (last-pass)
                then    (fprint _dst "&(") )
                (expr-ident)
                (if (last-pass)
                then    (fprint _dst ')') )
                (next-token) )
        (if (last-pass)
        then    (fprint _dst ",&(") )
        (if (<> _token "identificatore")
        then    (error "identifier expected") )
        (not-predefined)
        (expr-ident)
        (exprseq-ext 1 undef ")," "))") )

(defnet test-trim (verso)
        (if (last-pass)
        then    (fprint _dst "  if(trp_cord_" verso "trim_test(&(") )
        (next-token)
        (if (<> _token "identificatore")
        then    (error "identifier expected") )
        (not-predefined)
        (expr-ident)
        (exprseq-ext 0 undef ")," "))") )

(defnet test-in ()
        (if (last-pass)
        then    (fprint _dst "  if(trp_in_test(") )
        (expr)
        (virgola)
        (expr)
        (virgola)
        (next-token)
        (if (= _token "intervallo")
        then    (expr)
                (chiusa)
                (virgola)
                (if (last-pass)
                then    (fprint _dst "NULL,NULL") )
        else    (if (last-pass)
                then    (fprint _dst "NULL") )
                (virgola)
                (if (= _token "chiusa")
                then    (if (last-pass)
                        then    (fprint _dst "NULL,NULL") )
                else    (if (<> _token "identificatore")
                        then    (error "identifier expected") )
                        (not-predefined)
                        (if (last-pass)
                        then    (fprint _dst "&(") )
                        (expr-ident)
                        (if (last-pass)
                        then    (fprint _dst "),") )
                        (next-token)
                        (if (= _token "chiusa")
                        then    (if (last-pass)
                                then    (fprint _dst "NULL") )
                        else    (token-retract)
                                (expr)
                                (chiusa) )))
        (if (last-pass)
        then    (fprint _dst "))goto l" _labfail ';' nl) ))

(defnet test-if ()
        (deflocal label)

        (set _expr_const_enabled _expr_const_optimize)
        (set _expr_code "")
        (expr-basic)
        (parola-chiave "then")
        (if _expr_const
        then    (if (not (booleanp _expr_const_val))
                then    (error "`if' requires a boolean expression") )
                (if _expr_const_val
                then    (testseq)
                        (next-token)
                        (if (<> _token "chiusa")
                        then    (token-retract)
                                (parola-chiave "else")
                                (skip-testseq)
                                (chiusa) )
                else    (skip-testseq)
                        (next-token)
                        (if (<> _token "chiusa")
                        then    (token-retract)
                                (parola-chiave "else")
                                (testseq)
                                (chiusa) ))
        else    (inc _label)
                (set label _label)
                (if (last-pass)
                then    (fprint _dst "  if(" _expr_code "==TRP_FALSE)goto l" label ';' nl) )
                (testseq)
                (next-token)
                (if (<> _token "chiusa")
                then    (token-retract)
                        (parola-chiave "else")
                        (inc _label)
                        (if (last-pass)
                        then    (fprint _dst "  goto l" _label ';' nl
                                             'l' label ':' nl ))
                        (set label _label)
                        (testseq)
                        (chiusa) )
                (if (last-pass)
                then    (fprint _dst 'l' label ':' nl) )))

(defnet test-case ()
        (deflocal i j k l x labfail)

        (set i _tmp_tmp)
        (inc _tmp_tmp)
        (set _max_tmp (max _max_tmp _tmp_tmp))
        (inc _label)
        (set k _label)
        (inc _label)
        (set l _label)
        (set labfail _labfail)
        (set _labfail l)
        (if (last-pass)
        then    (fprint _dst "  t" i '='))
        (expr)
        (parola-chiave "of")
        (if (last-pass)
        then    (fprint _dst ';' nl) )
        (set x false)
        (repeat (next-token)
                until (= _token "chiusa")
                (if (and (= _token "identificatore") (= _tokenval "default"))
                then    (test)
                        (chiusa)
                        (set x true) )
                until x
                (inc _label)
                (set j _label)
                (if (last-pass)
                then    (fprint _dst "  if(trp_equal("))
                (token-retract)
                (expr)
                (if (last-pass)
                then    (fprint _dst ",t" i ")==TRP_FALSE)goto l" j ';' nl) )
                (test)
                (if (last-pass)
                then    (fprint _dst "  goto l" k ';' nl
                                     'l' j ':' nl) ))
        (set _labfail labfail)
        (inc _tmp_tmp -1)
        (if (last-pass)
        then    (fprint _dst "  goto l" k ';' nl
                             'l' l ':' nl
                             "  t" i "=UNDEF;" nl
                             "  goto l" _labfail ';' nl
                             'l' k ':' nl
                             "  t" i "=UNDEF;" nl )))

(defnet test-repeat ()
        (deflocal labloop labexit)

        (inc _label)
        (set labloop _label)
        (inc _label)
        (set labexit _label)
        (if (last-pass)
        then    (fprint _dst 'l' labloop ':' nl) )
        (repeat (next-token)
                until (= _token "chiusa")
                (if (and (= _token "identificatore") (= _tokenval "until"))
                then    (if (last-pass)
                        then    (fprint _dst "  if("))
                        (expr)
                        (if (last-pass)
                        then    (fprint _dst "!=TRP_FALSE)goto l" labexit ';' nl) )
                else    (token-retract)
                        (test) ))
        (if (last-pass)
        then    (fprint _dst "  goto l" labloop ';' nl
                             'l' labexit ':' nl )))

(defnet test-while ()
        (deflocal labloop labexit)

        (inc _label)
        (set labloop _label)
        (inc _label)
        (set labexit _label)
        (if (last-pass)
        then    (fprint _dst 'l' labloop ':' nl
                             "  if(" ))
        (expr)
        (if (last-pass)
        then    (fprint _dst "==TRP_FALSE)goto l" labexit ';' nl) )
        (parola-chiave "do")
        (repeat (next-token)
                until (= _token "chiusa")
                (if (and (= _token "identificatore") (= _tokenval "until"))
                then    (if (last-pass)
                        then    (fprint _dst "  if(") )
                        (expr)
                        (if (last-pass)
                        then    (fprint _dst "!=TRP_FALSE)goto l" labexit ';' nl) )
                else    (token-retract)
                        (test) ))
        (if (last-pass)
        then    (fprint _dst "  goto l" labloop ';' nl
                             'l' labexit ':' nl )))

(defnet test-for ()
        (deflocal i labloop labexit lastfor)

        (set i _tmp_tmp)
        (inc _tmp_tmp)
        (if (> _tmp_tmp _max_tmp)
        then    (set _max_tmp _tmp_tmp) )
        (inc _label)
        (set labloop _label)
        (inc _label)
        (set labexit _label)
        (next-token)
        (if (<> _token "identificatore")
        then    (error "identifier expected") )
        (not-predefined)
        (if (last-pass)
        then    (fprint _dst "  if(trp_for_init(&t" i ",&(" ))
        (expr-ident)
        (if (last-pass)
        then    (fprint _dst ")," ))
        (parola-chiave "in")
        (expr)
        (virgola)
        (next-token)
        (if (= _token "intervallo")
        then    (expr)
                (virgola)
                (next-token)
                (if (and (= _token "identificatore") (= _tokenval "step"))
                then    (expr)
                        (next-token)
                else    (if (last-pass)
                        then    (fprint _dst "UNO") ))
        else    (if (last-pass)
                then    (fprint _dst "NULL,UNO") ))
        (virgola)
        (if (and (= _token "identificatore") (= _tokenval "rev"))
        then    (if (last-pass)
                then    (fprint _dst 1) )
        else    (token-retract)
                (if (last-pass)
                then    (fprint _dst 0) ))
        (parola-chiave "do")
        (if (last-pass)
        then    (fprint _dst "))goto l" labexit ';' nl
                             'l' labloop ':' nl ))
        (set lastfor _lastfor)
        (set _lastfor i)
        (repeat (next-token)
                until (= _token "chiusa")
                (if (and (= _token "identificatore") (= _tokenval "until"))
                then    (if (last-pass)
                        then    (fprint _dst "  if(") )
                        (expr)
                        (if (last-pass)
                        then    (fprint _dst "!=TRP_FALSE){trp_for_break(&t" i ");goto l" labexit ";}" nl) )
                else    (token-retract)
                        (test) ))
        (set _lastfor lastfor)
        (inc _tmp_tmp -1)
        (if (last-pass)
        then    (fprint _dst "  if(trp_for_next(&t" i "))goto l" labloop ';' nl
                             'l' labexit ':' nl )))

(defnet test-callparse ()
        (deflocal name i)

        (next-token)
        (if (<> _token "stringa")
        then    (token-retract)
                (exprseq-ext 1 undef "  if(trp_netptr_call(" "))")
        else    (set name _tokenval)
                (if (last-pass)
                then    (set i <_net name>)
                        (if (= i undef)
                        then    (error (+ name ": undefined net")) )
                        (fprint _dst "  if(net_" <i 0> '(')
                        (for i in <i 1> do
                                (next-token)
                                (if (= _token "chiusa")
                                then    (error (+ name ": too few arguments to net")) )
                                (if (> (for-pos) 0)
                                then    (fprint _dst ',') )
                                (if (lmatch i "@")
                                then    (if (or (<> _token "identificatore")
                                                (in _tokenval (predefined)) )
                                        then    (error "identifier expected") )
                                        (fprint _dst "&(")
                                        (expr-ident)
                                        (fprint _dst ')')
                                else    (token-retract)
                                        (expr) ))
                        (alt    (chiusa)
                                (error (+ name ": too many arguments to net")) )
                        (fprint _dst "))goto l" _labfail ';' nl)
                else    (assoc-inc _act_calls (+ "net_" name))
                        (exprseq 0 undef undef undef) )))

(defnet test-save-env ()
        (deflocal i)

        (if (last-pass)
        then    (fprint _dst "  trp_push_env(")
                (for i in _act_params do
                        (fprint _dst (if (lmatch i "@") '*' "") 'i' (for-pos) ',') )
                (for i in _act_locals do
                        (fprint _dst 'j' (for-pos) ',') )
                (fprint _dst "NULL);" nl) ))

(defnet test-restore-env (labsucc)
        (deflocal i)

        (if (last-pass)
        then    (fprint _dst "  trp_pop_env_void(" (+ (length _act_params) (length _act_locals)) ");" nl
                             "  goto l" labsucc ';' nl
                             'l' _labfail ':' nl
                             "  trp_pop_env(" )
                (for i in _act_locals do
                        (fprint _dst "&j" (- (length _act_locals) 1 (for-pos)) ',') )
                (for i in _act_params rev do
                        (fprint _dst (if (lmatch i "@") "" '&') 'i' (- (length _act_params) 1 (for-pos)) ',') )
                (fprint _dst "NULL);" nl) ))

(defnet test-alt ()
        (deflocal labsucc labfail)

        (inc _label)
        (set labsucc _label)
        (set labfail _labfail)
        (repeat (next-token)
                until (= _token "chiusa")
                (token-retract)
                (test-save-env)
                (inc _label)
                (set _labfail _label)
                (test)
                (test-restore-env labsucc) )
        (set _labfail labfail)
        (if (last-pass)
        then    (fprint _dst "  goto l" _labfail ';' nl
                             'l' labsucc ':' nl )))

(defnet test-opt-basic (labsucc)
        (deflocal labfail)

        (set labfail _labfail)
        (inc _label)
        (set _labfail _label)
        (test-save-env)
        (testseq)
        (chiusa)
        (test-restore-env labsucc)
        (set _labfail labfail) )

(defnet test-opt ()
        (deflocal labsucc)

        (inc _label)
        (set labsucc _label)
        (test-opt-basic labsucc)
        (if (last-pass)
        then    (fprint _dst 'l' labsucc ':' nl) ))

(defnet test-opt* ()
        (deflocal labsucc)

        (inc _label)
        (set labsucc _label)
        (if (last-pass)
        then    (fprint _dst 'l' labsucc ':' nl) )
        (test-opt-basic labsucc) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

