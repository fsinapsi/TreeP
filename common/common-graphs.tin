;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun dgraph-create () (assoc))

(defnet dgraph-mknode (g name val)
        (deflocal a)

        (assocp g)
        (= <g name> undef)
        (set a (array 4))
        (set <a 0> (assoc)) ; archi in uscita
        (set <a 1> (assoc)) ; archi in ingresso
        (set <a 2> val)
        (set <a 3> (assoc)) ; attributi del nodo
        (set <g name> a) )

(defnet dgraph-rmnode (g name)
        (deflocal a aa)

        (assocp g)
        (set a <g name>)
        (<> a undef)
        (set aa <a 0>)
        (while (> (length aa) 0) do
                (dgraph-rmedge g name (assoc-root aa)) )
        (set aa <a 1>)
        (while (> (length aa) 0) do
                (dgraph-rmedge g (assoc-root aa) name) )
        (assoc-clr g name) )

(defun dgraph-succ (g name) <g name 0>)

(defun dgraph-prec (g name) <g name 1>)

(defun dgraph-succ-count (g name) (length <g name 0>))

(defun dgraph-prec-count (g name) (length <g name 1>))

(defun dgraph-succ-ext (g name)
        (dgraph-succ-prec-ext g name 0) )

(defun dgraph-prec-ext (g name)
        (dgraph-succ-prec-ext g name 1) )

(defun dgraph-succ-prec-ext (g name w) net dgraph-succ-prec-ext)
(defnet dgraph-succ-prec-ext (g name w @a)
        (deflocal q n)

        (assocp g)
        (<> <g name> undef)
        (set @a (assoc))
        (set q (queue))
        (queue-put q name)
        (repeat (for name in <g (queue-get q) w> do
                        (set n (car name))
                        (if (= <@a n> undef)
                        then    (set <@a n> true)
                                (queue-put q n) ))
                until (= (length q) 0) ))

(defnet dgraph-renamenode (g oldname newname)
        (deflocal a i aa)

        (assocp g)
        (set a <g oldname>)
        (<> a undef)
        (= <g newname> undef)
        (set <g newname> a)
        (assoc-clr g oldname)
        (for i in <a 0> do
                (if (<> (car i) oldname)
                then    (set aa <g (car i) 1>)
                        (set <aa newname> <aa oldname>)
                        (assoc-clr aa oldname) ))
        (for i in <a 1> do
                (if (<> (car i) oldname)
                then    (set aa <g (car i) 0>)
                        (set <aa newname> <aa oldname>)
                        (assoc-clr aa oldname) ))
        (set i <a 0 oldname>)
        (if (<> i undef)
        then    (set <a 0 newname> i)
                (assoc-clr <a 0> oldname) )
        (set i <a 1 oldname>)
        (if (<> i undef)
        then    (set <a 1 newname> i)
                (assoc-clr <a 1> oldname) ))

(defun dgraph-getnode (g name) net dgraph-getnode)
(defnet dgraph-getnode (g name @a)
        (assocp g)
        (set @a <g name>)
        (if (= @a undef)
        then    (dgraph-mknode g name undef)
                (set @a <g name>) ))

(defnet dgraph-setnodeval (g name val)
        (deflocal a)

        (set a (dgraph-getnode g name))
        (<> a undef)
        (set <a 2> val) )

(defun dgraph-getnodeval (g name) net dgraph-getnodeval)
(defnet dgraph-getnodeval (g name @val)
        (deflocal a)

        (assocp g)
        (set a <g name>)
        (<> a undef)
        (set @val <a 2>) )

(defnet dgraph-setnodeattr (g name key val)
        (deflocal a)

        (set a (dgraph-getnode g name))
        (<> a undef)
        (set <a 3 key> val) )

(defun dgraph-getnodeattr (g name key) net dgraph-getnodeattr)
(defnet dgraph-getnodeattr (g name key @val)
        (deflocal a)

        (assocp g)
        (set a <g name>)
        (<> a undef)
        (set @val <a 3 key>) )

;;;
;;; crea un nuovo arco
;;;

(defnet dgraph-mkedge (g name1 name2 val)
        (dgraph-mkedge-low g name1 name2 val false) )

;;;
;;; crea un nuovo arco purché tale creazione non introduca un ciclo
;;;

(defnet dgraph-mkedge-acyclic (g name1 name2 val)
        (dgraph-mkedge-low g name1 name2 val true) )

;;;
;;; crea un nuovo arco - low level
;;;

(defnet dgraph-mkedge-low (g name1 name2 val acyclic)
        (deflocal a1 a2 a)

        (set a1 (dgraph-getnode g name1))
        (<> a1 undef)
        (set a2 (dgraph-getnode g name2))
        (<> a2 undef)
        (set a1 <a1 0>)
        (set a2 <a2 1>)
        (= <a1 name2> undef)
        (if acyclic
        then    (<> name1 name2)
                (= <(dgraph-succ-ext g name2) name1> undef) )
        (set a (array 2))
        (set <a 0> val)
        (set <a 1> (assoc)) ; attributi dell`arco
        (set <a1 name2> a)
        (set <a2 name1> true) )

;;;
;;; rimuove un arco esistente
;;;

(defnet dgraph-rmedge (g name1 name2)
        (deflocal a1 a2)

        (assocp g)
        (set a1 <g name1>)
        (<> a1 undef)
        (set a2 <g name2>)
        (<> a2 undef)
        (set a1 <a1 0>)
        (set a2 <a2 1>)
        (<> <a1 name2> undef)
        (assoc-clr a1 name2)
        (assoc-clr a2 name1) )

;;;
;;; rimuove tutti gli archi in uscita da un nodo
;;;

(defnet dgraph-rmedges-succ (g name)
        (deflocal a)

        (assocp g)
        (set a <g name>)
        (<> a undef)
        (set a <a 0>)
        (while (> (length a) 0) do
                (dgraph-rmedge g name (assoc-root a)) ))

;;;
;;; rimuove tutti gli archi in ingresso a un nodo
;;;

(defnet dgraph-rmedges-prec (g name)
        (deflocal a)

        (assocp g)
        (set a <g name>)
        (<> a undef)
        (set a <a 1>)
        (while (> (length a) 0) do
                (dgraph-rmedge g (assoc-root a) name) ))

(defnet dgraph-setedgeval (g name1 name2 val)
        (deflocal a)

        (set a (dgraph-getnode g name1))
        (<> a undef)
        (set <a 0 name2 0> val) )

(defun dgraph-getedgeval (g name1 name2)
        <g name1 0 name2 0> )

(defnet dgraph-setedgeattr (g name1 name2 key val)
        (deflocal a)

        (set a (dgraph-getnode g name1))
        (<> a undef)
        (set <a 0 name2 1 key> val) )

(defun dgraph-getedgeattr (g name1 name2 key)
        <g name1 0 name2 1 key> )

; rende una copia di un grafo

(defun dgraph-clone (g) net dgraph-clone)
(defnet dgraph-clone (g @g)
        (deflocal i j name a)

        (assocp g)
        (set @g (dgraph-create))
        (for i in g do
                (set name (car i))
                (set a (cdr i))
                (for j in <a 0> do
                        (dgraph-mkedge @g name (car j) <(cdr j) 0>)
                        (dgraph-clone-attr <(cdr j) 1> <@g name 0 (car j) 1>) )
                (opt (dgraph-mknode @g name undef))
                (set i <@g name>)
                (set <i 2> <a 2>)
                (dgraph-clone-attr <a 3> <i 3>) ))

(defnet dgraph-clone-attr (ai ao)
        (deflocal i)

        (for i in ai do
                (set <ao (car i)> (cdr i)) ))

; rende una copia del più grande sottografo connesso
; contenente un nodo

(defun dgraph-clone-sub (g name) net dgraph-clone-sub)
(defnet dgraph-clone-sub (g name @g)
        (deflocal q v a j n)

        (assocp g)
        (set a <g name>)
        (<> a undef)
        (set @g (dgraph-create))
        (set q (queue))
        (set v (assoc))
        (set <v name> true)
        (repeat (for j in <a 0> do
                        (set n (car j))
                        (if (= <v n> undef)
                        then    (queue-put q n)
                                (set <v n> true) )
                        (dgraph-mkedge @g name n <(cdr j) 0>)
                        (dgraph-clone-attr <(cdr j) 1> <@g name 0 n 1>) )
                (for j in <a 1> do
                        (set n (car j))
                        (if (= <v n> undef)
                        then    (queue-put q n)
                                (set <v n> true) ))
                (opt (dgraph-mknode @g name undef))
                (set j <@g name>)
                (set <j 2> <a 2>)
                (dgraph-clone-attr <a 3> <j 3>)
                until (= (length q) 0)
                (set name (queue-get q))
                (set a <g name>) ))

; simile al precedente però fa in modo che ogni nodo
; contenuto nel sottografo sia raggiungibile da name
; (o viceversa)

(defun dgraph-clone-sub-weak (g name) net dgraph-clone-sub-weak)
(defnet dgraph-clone-sub-weak (g name @g)
        (deflocal q v a nn aa j n)

        (assocp g)
        (set a <g name>)
        (<> a undef)
        (set @g (dgraph-create))
        (set q (queue))
        (set v (assoc))
        (set <v name> true)
        (set nn name)
        (set aa a)
        (repeat (for j in <aa 0> do
                        (set n (car j))
                        (if (= <v n> undef)
                        then    (queue-put q n)
                                (set <v n> true) )
                        (dgraph-mkedge @g nn n <(cdr j) 0>)
                        (dgraph-clone-attr <(cdr j) 1> <@g nn 0 n 1>) )
                (opt (dgraph-mknode @g nn undef))
                (set j <@g nn>)
                (set <j 2> <aa 2>)
                (dgraph-clone-attr <aa 3> <j 3>)
                until (= (length q) 0)
                (set nn (queue-get q))
                (set aa <g nn>) )
        (set nn name)
        (set aa a)
        (repeat (for j in <aa 1> do
                        (set n (car j))
                        (if (= <v n> undef)
                        then    (queue-put q n)
                                (set <v n> true) )
                        (dgraph-mkedge @g n nn <g n 0 nn 0>)
                        (dgraph-clone-attr <g n 0 nn 1> <@g n 0 nn 1>) )
                (opt (dgraph-mknode @g nn undef))
                (set j <@g nn>)
                (set <j 2> <aa 2>)
                (dgraph-clone-attr <aa 3> <j 3>)
                until (= (length q) 0)
                (set nn (queue-get q))
                (set aa <g nn>) ))

; rende un array contenente i sottografi connessi

(defun dgraph-partition (g) net dgraph-partition)
(defnet dgraph-partition (g @a)
        (deflocal sub i)

        (set g (dgraph-clone g))
        (assocp g)
        (set @a (array 0))
        (while (> (length g) 0) do
                (set sub (dgraph-clone-sub g (assoc-root g)))
                (array-append @a sub)
                (for i in sub do
                        (dgraph-rmnode g (car i)) )))

;;;
;;; booleano: true sse il grafo è connesso
;;;

(defun dgraph-is-connected (g) net dgraph-is-connected)
(defnet dgraph-is-connected (g @ris)
        (deflocal l)

        (assocp g)
        (set l (length g))
        (if (= l 0)
        then    (set @ris true)
        else    (set @ris (= (length (dgraph-clone-sub g (assoc-root g))) l)) ))

;;;
;;; rende la radice se il grafo è un albero, altrimenti undef
;;; FIXME forse si può fare meglio
;;;

(defun dgraph-root-if-is-tree (g) net dgraph-root-if-is-tree)
(defnet dgraph-root-if-is-tree (g @r)
        (deflocal n)

        (for n in g do
                (case (length (dgraph-prec g (car n))) of
                        0       (seq    (= @r undef)
                                        (set @r (car n)) )
                        1       (success)
                        default (fail) ))
        (<> @r undef)
        (= (length (dgraph-succ-ext g @r)) (- (length g) 1)) )

;;;
;;; input: g (digrafo non vuoto), p (nodo di g);
;;; i valori degli archi di g devono essere razionali positivi;
;;; output: albero contenente tutti i nodi raggiungibili da p in un cammino
;;; di costo minimo (il costo del cammino da p al nodo è nell`unico arco
;;; entrante nel nodo)
;;;

(defun dgraph-dijkstra (g p) net dgraph-dijkstra)
(defnet dgraph-dijkstra (g p @g)
        (deflocal q d n m dnm i)

        (set @g (dgraph-create))
        (set q (fibo))
        (dgraph-dijkstra-update @g q p 0 undef)
        (repeat (set d (fibo-extract q))
                (set n (fibo-obj d))
                (set d (fibo-key d))
                (for i in (dgraph-succ g n) do
                        (set m (car i))
                        (set dnm (dgraph-getedgeval g n m))
                        (rationalp dnm)
                        (> dnm 0)
                        (dgraph-dijkstra-update @g q m (+ d dnm) n) )
                until (= (length q) 0) )
        (for i in @g do
                (set d <(cdr i) 2>)
                (set n <d 1>)
                (if (<> n undef)
                then    (dgraph-mkedge @g n (car i) (fibo-key <d 0>)) )))

(defnet dgraph-dijkstra-update (g q node dist prev)
        (deflocal a)

        (set a (dgraph-getnodeval g node))
        (if (= a undef)
        then    (set a (array 2))
                (set <a 0> (fibo-insert q dist node))
                (set <a 1> prev)
                (dgraph-mknode g node a)
        else    (if (< dist (fibo-key <a 0>))
                then    (fibo-decrease-key q <a 0> dist)
                        (set <a 1> prev) )))

;;;
;;; input: g (digrafo non vuoto), p (nodo di g);
;;; i valori degli archi di g devono essere razionali (anche negativi);
;;; output: albero contenente tutti i nodi raggiungibili da p in un cammino
;;; di costo minimo (il costo del cammino da p al nodo è nell`unico arco
;;; entrante nel nodo)
;;;

(defun dgraph-bellman-ford (g p) net dgraph-bellman-ford)
(defnet dgraph-bellman-ford (g p @g)
        (deflocal n nn d i cnt unchanged)

        (set @g (dgraph-create))
        (dgraph-bellman-ford-update @g p 0 undef)
        (set cnt (length g))
        (repeat (set unchanged true)
                (for n in @g do
                        (set nn (car n))
                        (set d <(cdr n) 2 0>)
                        (for i in (dgraph-succ g nn) do
                                (opt    (dgraph-bellman-ford-update @g (car i) (+ d (dgraph-getedgeval g nn (car i))) nn)
                                        (set unchanged false) )))
                until unchanged
                (dec cnt)
                ; se cnt == 0 allora abbiamo rilevato un ciclo di lunghezza negativa
                ; e rendiamo undef
                (> cnt 0) )
        (for i in @g do
                (set d <(cdr i) 2>)
                (set n <d 1>)
                (if (<> n undef)
                then    (dgraph-mkedge @g n (car i) <d 0>) )))

(defnet dgraph-bellman-ford-update (g node dist prev)
        (deflocal a)

        (set a (dgraph-getnodeval g node))
        (if (= a undef)
        then    (set a (array 2))
                (dgraph-mknode g node a)
        else    (< dist <a 0>) )
        (set <a 0> dist)
        (set <a 1> prev) )

;;;
;;; genera un digrafo random
;;;

(defun dgraph-random (n l) net dgraph-random)
(defnet dgraph-random (n l @g)
        (deflocal i)

        (integerp n)
        (integerp l)
        (in n 2 .. 26)
        (in l 1 .. 500)
        (set @g (dgraph-create))
        (for i in 1 .. n do
                (dgraph-mknode @g (int->char (+ 64 i)) undef) )
        (while (> l 0) do
                (opt    (dgraph-mkedge @g (int->char (+ 65 (random n)))
                                          (int->char (+ 65 (random n)))
                                          (+ 1 (random 10)) )
                        (dec l) )))

;;;
;;; genera un sorgente dot
;;;

(defun dgraph->dot (g)
        ;(dgraph->dot-neato g) ) ; <- talvolta crasha
        (dgraph->dot-sfdp g) )

(defun dgraph->dot-dot (g)
        (dgraph->dot-low g "dot") )

(defun dgraph->dot-neato (g)
        (dgraph->dot-low g "neato") )

(defun dgraph->dot-fdp (g)
        (dgraph->dot-low g "fdp") )

(defun dgraph->dot-sfdp (g)
        (dgraph->dot-low g "sfdp") )

(defun dgraph->dot-twopi (g)
        (dgraph->dot-low g "twopi") )

(defun dgraph->dot-circo (g)
        (dgraph->dot-low g "circo") )

(defun dgraph->dot-low (g layout) net dgraph->dot-low)
(defnet dgraph->dot-low (g layout @dot)
        (deflocal a n nn s m v sep)

        (assocp g)
        (set @dot (+ "digraph G {" nl
                     "  layout=" layout ";" nl
                     (if (= layout "dot") "  rankdir=LR;\n" "")
                     "  esep=0.4;" nl
                     "  splines=true;" nl
                     "  overlap=voronoi;" nl
                     "  overlap_shrink=true;" nl ))
        (set a (assoc))
        (for n in g do
                (set nn (car n))
                (set s (+ "n" (for-pos)))
                (set <a nn> s)
                (inc @dot "  " s " [label=" (dgraph->dot-quote nn))
                (for v in <(cdr n) 3> do
                        (inc @dot "," (car v) "=" (dgraph->dot-value (cdr v))) )
                (inc @dot "];" nl) )
        (for n in g do
                (set nn (car n))
                (set s <a nn>)
                (for m in (dgraph-succ g nn) do
                        (inc @dot "  " s " -> " <a (car m)> "[")
                        (set sep "")
                        (if (and (= <(cdr m) 1 "label"> undef)
                                 (= <(cdr m) 1 "taillabel"> undef)
                                 (= <(cdr m) 1 "headlabel"> undef) )
                        then    (set v <(cdr m) 0>)
                                (if (<> v undef)
                                then    (inc @dot "label=" (dgraph->dot-value v))
                                        (set sep ",") ))
                        (for v in <(cdr m) 1> do
                                (inc @dot sep (car v) "=" (dgraph->dot-value (cdr v)))
                                (set sep ",") )
                        (inc @dot "];" nl) ))
        (inc @dot "}" nl) )

(defun dgraph->dot-quote (s)
        (+ "\"" (find-and-replace (str-split (find-and-replace s "\"" "\\\"") 20) "\n" "\\n") "\"") )

(defun dgraph->dot-value (v)
        (+ "\"" (if (colorp v) (dgraph->dot-color v) v) "\"") )

(defun dgraph->dot-color (color)
        (+ "#" (dgraph->dot-color-byte (pix-color-red color))
               (dgraph->dot-color-byte (pix-color-green color))
               (dgraph->dot-color-byte (pix-color-blue color))
               (dgraph->dot-color-byte (pix-color-alpha color)) ))

(defun dgraph->dot-color-byte (b) (sprint (hexdigit0 (div b 0x10)) (hexdigit0 (% b 0x10))))

;;;
;;; genera un`immagine del grafo g
;;;

(defun dgraph->pix (g)
        (ag-dot2pix-transparent (dgraph->dot g)) )

;;;
;;; salva su path un`immagine del grafo g
;;;

(defnet dgraph-save-png (g path)
        (deflocal pix)

        (set pix (dgraph->pix g))
        (pixp pix)
        (alt    (pix-save-png pix path)
                (seq    (close pix)
                        (fail) ))
        (close pix) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; obsoleto (usare ag-dot2pix)

;(defun dot->pix (dot) net dot->pix)
;(defnet dot->pix (dot @pix)
;        (deflocal tmp)

;        (stringp dot)
;        (mktmpdir tmp)
;        (alt    (seq    (str-save (+ tmp "/a.dot") dot)
;                        (system "dot -Tpng " (+ tmp "/a.dot") " > " (+ tmp "/a.png") " 2>/dev/null")
;                        (set @pix (pix-load (+ tmp "/a.png")))
;                        (pixp @pix)
;                        (rmhier tmp) )
;                (seq    (rmhier tmp)
;                        (fail) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

