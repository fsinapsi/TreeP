;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun srt-parse (s) net srt-parse)
(defnet srt-parse (s @srt)
        (deflocal l n i seca secb txt a)

        (stringp s)
        (set @srt (array 0))
        (opt (lmatch remove s (utf8-bom)))
        (if (not (utf8p s))
        then    (set s (iso->utf8 s)) )
        (repeat (repeat (str-readline s l)
                        until (= l undef)
                        (str-remove-blanks l)
                        until (<> l "") )
                until (= l undef)
                (set n (str->num l))
                (integerp n)
                (str-readline s l)
                (stringp l)
                (str-remove-blanks l)
                (search " --> " l i)
                (set seca (srt-timestamp->s (sub 0 i l)))
                (rationalp seca)
                (>= seca 0)
                (set secb (srt-timestamp->s (sub (+ i 5) (maxint) l)))
                (rationalp secb)
                (>= secb 0)
                (set txt "")
                (repeat (str-readline s l)
                        until (= l undef)
                        (str-remove-blanks l)
                        until (= l "")
                        (inc txt (if (= txt "") "" nl) l) )
                (if (<> txt "")
                then    (set a (array 4))
                        (array-append @srt a)
                        (set <a 0> n)
                        (set <a 1> seca)
                        (set <a 2> secb)
                        (set <a 3> txt) )
                until (= l undef) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun vtt-parse (s) net vtt-parse)
(defnet vtt-parse (s @srt)
        (deflocal l i seca secb txt a)

        (stringp s)
        (set @srt (array 0))
        (opt (lmatch remove s (utf8-bom)))
        (if (not (utf8p s))
        then    (set s (iso->utf8 s)) )
        (repeat (clr i)
                (repeat (str-readline s l)
                        until (= l undef)
                        (str-remove-blanks l)
                        (opt (search " --> " l i))
                        until (integerp i) )
                until (= l undef)
                (opt    (search-and-cut "align" l txt)
                        (set l txt)
                        (str-remove-blanks l) )
                (set seca (srt-timestamp->s (sub 0 i l)))
                (rationalp seca)
                (>= seca 0)
                (set secb (srt-timestamp->s (sub (+ i 5) (maxint) l)))
                (rationalp secb)
                (>= secb 0)
                (set txt "")
                (repeat (str-readline s l)
                        until (= l undef)
                        until (= l "")
                        (str-remove-blanks l)
                        (if (<> l "")
                        then    (inc txt (if (= txt "") "" nl) l) ))
                (opt*   (search-and-cut "<c>" txt l)
                        (set i (length l))
                        (>= i 14)
                        (dec i 14)
                        (= <l i> '<')
                        (= <l (+ i 13)> '>')
                        (rationalp (srt-timestamp->s (sub (+ i 1) 12 l)))
                        (set l (sub 0 i l))
                        (search-and-cut "</c>" txt i)
                        (set txt (+ l i txt)) )
                (if (<> txt "")
                then    (set a (array 4))
                        (array-append @srt a)
                        (set <a 0> (length @srt))
                        (set <a 1> seca)
                        (set <a 2> secb)
                        (set <a 3> txt) )
                until (= l undef) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun srt-dump (srt) net srt-dump)
(defnet srt-dump (srt @s)
        (deflocal i)

        (set @s "")
        (for i in srt do
                (inc @s <i 0> nl
                        (srt-s->timestamp <i 1>) " --> " (srt-s->timestamp <i 2>) nl
                        <i 3> nl
                        nl )))

(defun srt-dump-fix-counts (srt) net srt-dump-fix-counts)
(defnet srt-dump-fix-counts (srt @s)
        (deflocal i)

        (set @s "")
        (for i in srt do
                (inc @s (+ (for-pos) 1) nl
                        (srt-s->timestamp <i 1>) " --> " (srt-s->timestamp <i 2>) nl
                        <i 3> nl
                        nl )))

(defun srt-dump-text-only (srt) net srt-dump-text-only)
(defnet srt-dump-text-only (srt @s)
        (deflocal i)

        (set @s "")
        (for i in srt do
                (inc @s <i 3> nl) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun srt-timestamp->s (s) net srt-timestamp->s)
(defnet srt-timestamp->s (s @sec)
        (deflocal i)

        (set @sec 0)
        (opt    (search ":" s i)
                (set @sec (* 60 (str->num (str-remove-blanks (sub 0 i s)))))
                (set s (sub (+ i 1) (maxint) s))
                (opt    (search ":" s i)
                        (set @sec (* 60 (+ @sec (str->num (str-remove-blanks (sub 0 i s))))))
                        (set s (sub (+ i 1) (maxint) s)) ))
        (alt    (search "," s i)
                (search "." s i) )
        (inc @sec (str->num (str-remove-blanks (sub 0 i s))))
        (set s (str-remove-blanks (sub (+ i 1) (maxint) s)))
        (<> s "")
        (inc @sec (/ (str->num s) (pow 10 (length s)))) )

(defun srt-s->timestamp (sec) net srt-s->timestamp)
(defnet srt-s->timestamp (sec @s)
        (deflocal ms)

        (inc sec 0.0005)
        (set ms (- sec (floor sec)))
        (set sec (floor sec))
        (set @s (int->str (div sec 3600) 2 '0'))
        (set sec (% sec 3600))
        (inc @s ":" (int->str (div sec 60) 2 '0'))
        (set sec (% sec 60))
        (inc @s ":" (int->str sec 2 '0')
                "," (int->str (floor (* ms 1000)) 3 '0') ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet srt-is-correct (srt)
        (deflocal i prv1 prv2)

        (arrayp srt)
        (> (length srt) 0)
        (set prv1 -1)
        (set prv2 -1)
        (for i in srt do
                (> <i 1> prv1)
                (>= <i 2> prv2)
                (< <i 1> <i 2>)
                (set prv1 <i 1>)
                (set prv2 <i 2>) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun srt-join (srt1 srt2) net srt-join)
(defnet srt-join (srt1 srt2 @srt)
        (deflocal i j a)

        (set @srt (array (+ (length srt1) (length srt2))))
        (set i 0)
        (for j in srt1 do
                (set a (array 4))
                (set <@srt i> a)
                (inc i)
                (set <a 0> <j 0>)
                (set <a 1> <j 1>)
                (set <a 2> <j 2>)
                (set <a 3> <j 3>) )
        (for j in srt2 do
                (set a (array 4))
                (set <@srt i> a)
                (inc i)
                (set <a 0> <j 0>)
                (set <a 1> <j 1>)
                (set <a 2> <j 2>)
                (set <a 3> <j 3>) )
        (sort @srt (funptr less1)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet srt-linear (srt a b c d)
        (deflocal i)

        (for i in srt do
                (set <i 1> (linear <i 1> a b c d))
                (set <i 2> (linear <i 2> a b c d)) ))

(defnet srt-linear-change-fps (srt fps-from fps-to)
        (srt-linear srt 0 fps-to 0 fps-from) )

(defnet srt-shift (srt shift)
        (srt-linear srt 0 1 shift (+ 1 shift)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun srt-rows (s) net srt-rows)
(defnet srt-rows (s @a)
        (deflocal t)

        (set @a (array 0))
        (repeat (str-readline s t)
                until (= t undef)
                (array-append @a t) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet srt-single-row (srt)
        (deflocal i b c r l j t lprv tprv)

        (srt-is-correct srt)
        (for i in 0 .. (- (length srt) 1) rev do
                (set b <srt i>)
                (set r (srt-rows <b 3>))
                (if (> (length r) 1)
                then    (array-remove srt i)
                        (set l (- (length <b 3>) (- (length r) 1)))
                        (set lprv 0)
                        (set tprv <b 1>)
                        (for j in r do
                                (inc lprv (length j))
                                (set t (linear lprv 0 l <b 1> <b 2>))
                                (set c (array 4))
                                (array-insert srt (+ i (for-pos)) c)
                                (set <c 0> i)
                                (set <c 1> tprv)
                                (set <c 2> t)
                                (set <c 3> j)
                                (set tprv t) )))
        (srt-is-correct srt)
        (for i in 1 .. (- (length srt) 1) rev do
                (if (and (= <srt i 3> <srt (- i 1) 3>)
                         (< (- <srt i 1> <srt (- i 1) 2>) 0.1) )
                then    (set <srt (- i 1) 2> <srt i 2>)
                        (array-remove srt i) ))
        (srt-is-correct srt) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet srt-fix-timestamps (srt)
        (deflocal i)

        (for i in 0 .. (- (length srt) 1) do
                (if (= i (- (length srt) 1))
                then    (if (<= <srt i 2> <srt i 1>)
                        then    (set <srt i 2> (+ <srt i 1> 1)) )
                else    ;(print (+ i 1) ": " (< <srt i 1> <srt (+ i 1) 1>) nl)
                        (< <srt i 1> <srt (+ i 1) 1>) ; FIXME
                        (if (or (<= <srt i 2> <srt i 1>) (>= <srt i 2> <srt (+ i 1) 1>))
                        then    (set <srt i 2> (- <srt (+ i 1) 1> 0.001)) ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet srt-detag-all (srt)
        (deflocal n t)

        (for n in 0 .. (- (length srt) 1) rev do
                (set t (xml-parse <srt n 3>))
                (if (treep t)
                then    (set t (xml-get-detagged-text t))
                        (if (= t "")
                        then    (array-remove srt n)
                        else    (set <srt n 3> t) ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;
;;; da usare solo dopo (srt-fix-timestamps a)
;;; in caso di sottotitoli vtt
;;;

(defun srt-split (a) net srt-split)
(defnet srt-split (a @b)
        (deflocal c d t l i)

        (set @b (array 0))
        (for c in a do
                (set t <c 3>)
                (repeat (str-readline t l)
                        until (= l undef)
                        (set i (length @b))
                        (alt    (seq    (> i 0)
                                        (dec i)
                                        (= l <@b i 3>)
                                        (= (- <c 1> <@b i 2>) 0.001)
                                        (set <@b i 2> <c 2>) )
                                (seq    (set d (array 4))
                                        (array-append @b d)
                                        (set <d 0> (+ i 1))
                                        (set <d 1> <c 1>)
                                        (set <d 2> <c 2>)
                                        (set <d 3> l)
                                        (if (> i 0)
                                        then    (dec i)
                                                (set <@b i 2> (max 0 (min <@b i 2> (- <c 1> 0.001)))) ))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

