;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-gtk2 ()
        (if (clinux)
                (lmatch (iup-get-global "GTKVERSION") "2.")
                false ))

(defun iup-gtk3 ()
        (if (clinux)
                (lmatch (iup-get-global "GTKVERSION") "3.")
                false ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-set-lang ()
        (set-lang (if (lmatch case (iup-get-global "SYSTEMLANGUAGE") "it") 1 0)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-set-dlg-parent (self dlg)
        (if (<> self undef)
        then    (iup-set-attribute-handle dlg "PARENTDIALOG" (iup-get-dialog self)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-set-bool (wid attribute val)
        (booleanp val)
        (iup-set-str-attribute wid attribute (if val "YES" "NO")) )

(defun iup-get-bool (wid attribute)
        (in (iup-get-str-attribute wid attribute) [ "YES" "ON" ]) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-set-active (wid val)
        (iup-set-bool wid "ACTIVE" val) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-label-set (lbl txt)
        (iup-set-str-attribute lbl "TITLE" (find-and-replace txt "&" "&&"))
        (iup-refresh lbl) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-color-iup->trp (s) net iup-color-iup->trp)
(defnet iup-color-iup->trp (s @color)
        (deflocal r g b)

        (search-and-cut " " s r)
        (search-and-cut " " s g)
        (alt    (seq    (search-and-cut " " s b)
                        (set @color (pix-color (str->num r) (str->num g) (str->num b) (str->num s))) )
                (set @color (pix-color (str->num r) (str->num g) (str->num s))) ))

(defun iup-fgcolor (wid)
        (iup-color-iup->trp (iup-get-str-attribute wid "FGCOLOR")) )

(defun iup-bgcolor (wid)
        (iup-color-iup->trp (iup-get-str-attribute wid "BGCOLOR")) )

(defun iup-color-trp->iup (c)
        (sprint (pix-color-red c) " " (pix-color-green c) " " (pix-color-blue c)) )

(defnet iup-set-fgcolor (wid c)
        (iup-set-str-attribute wid "FGCOLOR" (iup-color-trp->iup c)) )

(defnet iup-set-bgcolor (wid c)
        (iup-set-str-attribute wid "BGCOLOR" (iup-color-trp->iup c)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-ok-cb (self)
        (iup-set-int (iup-get-dialog self) "STATUS" 1)
        (iup-exit-loop) )

(defnet iup-cancel-cb (self)
        (iup-exit-loop) )

(defnet iup-success-cb (self)
        (success) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-close-queue (q)
        (deflocal wid)

        (for wid in q do
                (close wid) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-horizontal-separator () net iup-horizontal-separator)
(defnet iup-horizontal-separator (@wid)
        (set @wid (iup-label))
        (iup-set-str-attribute @wid "SEPARATOR" "HORIZONTAL") )

(defun iup-vertical-separator () net iup-vertical-separator)
(defnet iup-vertical-separator (@wid)
        (set @wid (iup-label))
        (iup-set-str-attribute @wid "SEPARATOR" "VERTICAL") )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;; (iup-button-icon title cback iconpix q)                              ;;;;
;;;; (iup-button-icon-ok cback q)                                         ;;;;
;;;; (iup-button-icon-confirm cback q)                                    ;;;;
;;;; (iup-button-icon-cancel cback q)                                     ;;;;
;;;; (iup-box-ok cback q)                                                 ;;;;
;;;; (iup-box-ok-btn butbox)                                              ;;;;
;;;; (iup-box-ok-cancel cback-ok cback-cancel q)                          ;;;;
;;;; (iup-box-confirm-cancel cback-ok cback-cancel q)                     ;;;;
;;;; (iup-box-ok-cancel-btn-ok butbox)                                    ;;;;
;;;; (iup-box-ok-cancel-btn-cancel butbox)                                ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-button-icon (title cback iconpix q) net iup-button-icon)
(defnet iup-button-icon (title cback iconpix q @wid)
        (deflocal padding spacing img)

        (if (stringp title)
        then    (set @wid (iup-button title))
                (set padding "2x2")
                (set spacing 6)
        else    (set @wid (iup-button))
                (set padding "0x0")
                (set spacing 0) )
        (iup-set-callback @wid "ACTION" cback)
        (set img (iup-image-rgba-hacked iconpix))
        (iup-set-attribute-handle @wid "IMAGE" img)
        (iup-set-str-attribute @wid "PADDING" padding)
        (iup-set-int @wid "SPACING" spacing)
        (queue-put q img) )

(defun iup-button-icon-ok-low (title cback q)
        (iup-button-icon title (if (<> cback undef) cback (netptr iup-ok-cb)) (pix-load-static "16x16/dialog-apply.png") q) )

(defun iup-button-icon-ok (cback q)
        (iup-button-icon-ok-low "Ok" cback q) )

(defun iup-button-icon-confirm (cback q)
        (iup-button-icon-ok-low $"Confirm" cback q) )

(defun iup-button-icon-cancel (cback q)
        (iup-button-icon $"Cancel" (if (<> cback undef) cback (netptr iup-cancel-cb)) (pix-load-static "16x16/dialog-cancel-3.png") q) )

(defun iup-box-ok (cback q) net iup-box-ok)
(defnet iup-box-ok (cback q @wid)
        (deflocal pre btn-ok hbox)

        (set pre (iup-hbox))
        (iup-set-str-attribute pre "MARGIN" "0x3")

        (set btn-ok (iup-button-icon-ok cback q))
        (iup-set-bool btn-ok "CANFOCUS" (cmingw))

        (set hbox (iup-hbox
                (iup-fill)
                btn-ok
                (iup-fill) ))

        (set @wid (iup-vbox pre (iup-horizontal-separator) hbox))
        (iup-set-str-attribute @wid "MARGIN" "6x6")
        (iup-set-int @wid "GAP" 4) )

(defun iup-box-ok-btn (butbox)
        <butbox 2 1> )

(defun iup-box-ok-cancel-low (title-ok cback-ok cback-cancel q) net iup-box-ok-cancel-low)
(defnet iup-box-ok-cancel-low (title-ok cback-ok cback-cancel q @wid)
        (deflocal pre sep btn-ok btn-cancel hbox)

        (set pre (iup-hbox))
        (iup-set-str-attribute pre "MARGIN" "0x3")

        (set sep (iup-horizontal-separator))

        (set btn-ok (iup-button-icon-ok-low title-ok cback-ok q))
        (iup-set-str-attribute btn-ok "CANFOCUS" (if (cmingw) "YES" "NO"))
        (set btn-cancel (iup-button-icon-cancel cback-cancel q))
        (iup-set-str-attribute btn-cancel "CANFOCUS" (if (cmingw) "YES" "NO"))

        (set hbox (iup-hbox
                (iup-fill)
                btn-ok
                btn-cancel ))

        (set @wid (iup-vbox pre sep hbox))
        (iup-set-str-attribute @wid "MARGIN" "6x6")
        (iup-set-int @wid "GAP" 4) )

(defun iup-box-ok-cancel (cback-ok cback-cancel q)
        (iup-box-ok-cancel-low "Ok" cback-ok cback-cancel q) )

(defun iup-box-confirm-cancel (cback-ok cback-cancel q)
        (iup-box-ok-cancel-low $"Confirm" cback-ok cback-cancel q) )

(defun iup-box-ok-cancel-btn-ok (butbox)
        <butbox 2 1> )

(defun iup-box-ok-cancel-btn-cancel (butbox)
        <butbox 2 2> )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-choose-date (self date) net iup-choose-date)
(defnet iup-choose-date (self date @date)
        (deflocal q cal butbox vbox dlg)

        (set q (queue))

        (set cal (iup-choose-date-calendar date))

        (set butbox (iup-box-ok-cancel undef undef q))

        (set vbox (iup-vbox cal butbox))
        (iup-set-str-attribute vbox "MARGIN" "6x6")
        (iup-set-int vbox "GAP" 0)

        (set dlg (iup-dialog vbox))
        (iup-set-dlg-parent self dlg)
        (iup-set-str-attribute dlg "TITLE" $"Choose a date")
        (iup-set-bool dlg "DIALOGFRAME" true)
        (iup-set-attribute-handle dlg "DEFAULTENTER" (iup-box-ok-cancel-btn-ok butbox))
        (iup-set-attribute-handle dlg "DEFAULTESC" (iup-box-ok-cancel-btn-cancel butbox))
        (iup-set-int dlg "STATUS" 0)

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (if (= (iup-get-int dlg "STATUS") 1)
        then    (set @date (iup-choose-date-parse (iup-get-str-attribute cal "VALUE")))
        else    (clr @date) )

        (close dlg)
        (iup-close-queue q) )

(defun iup-choose-date-calendar (date) net iup-choose-date-calendar)
(defnet iup-choose-date-calendar (date @wid)
        (deflocal mm gg)

        (if (not (datep date))
        then    (set date (now)) )
        (set mm (date-month date))
        (set gg (date-day date))
        (set @wid (iup-calendar))
        (iup-set-str-attribute @wid "VALUE"
                (sprint (date-year date) "/"
                        (if (integerp mm) mm 1) "/"
                        (if (integerp gg) gg 1) )))

(defun iup-choose-date-parse (s) net iup-choose-date-parse)
(defnet iup-choose-date-parse (s @date)
        (deflocal i aa)

        (search "/" s i)
        (set aa (str->num (sub 0 i s)))
        (set s (sub (+ i 1) (maxint) s))
        (search "/" s i)
        (set @date (date aa (str->num (sub 0 i s)) (str->num (sub (+ i 1) (maxint) s))))
        (datep @date) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-choose-font (self font) net iup-choose-font)
(defnet iup-choose-font (self font @font)
        (deflocal dlg)

        (set dlg (iup-font-dlg))
        (iup-set-dlg-parent self dlg)
        (iup-set-str-attribute dlg "TITLE" $"Choose a font")
        (iup-set-bool dlg "DIALOGFRAME" true)
        (if (stringp font)
        then    (iup-set-str-attribute dlg "VALUE" font) )

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (if (= (iup-get-int dlg "STATUS") 1)
        then    (set @font (iup-get-str-attribute dlg "VALUE"))
        else    (clr @font) )

        (close dlg) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-choose-color (self color)
        (iup-choose-color-low false self color) )

(defun iup-choose-color-alpha (self color)
        (iup-choose-color-low true self color) )

(defun iup-choose-color-low (alpha self color) net iup-choose-color-low)
(defnet iup-choose-color-low (alpha self color @color)
        (deflocal dlg)

        (set dlg (iup-color-dlg))
        (iup-set-dlg-parent self dlg)
        (iup-set-str-attribute dlg "TITLE" $"Choose a color")
        (iup-set-bool dlg "DIALOGFRAME" true)
        (iup-set-bool dlg "SHOWCOLORTABLE" true)
        (iup-set-bool dlg "SHOWHEX" true)
        (iup-set-bool dlg "SHOWALPHA" alpha)
        (if (colorp color)
        then    (iup-set-str-attribute dlg "VALUE" (sprint (pix-color-red color) " " (pix-color-green color) " " (pix-color-blue color)))
                (if alpha
                then    (iup-set-int dlg "ALPHA" (pix-color-alpha color)) ))

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (if (= (iup-get-int dlg "STATUS") 1)
        then    (set @color (iup-color-iup->trp (iup-get-str-attribute dlg "VALUE")))
        else    (clr @color) )

        (close dlg) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;; (iup-choose-file-open self title directory extfilter showhidden)     ;;;;
;;;; (iup-choose-file-open-txt self title directory showhidden)           ;;;;
;;;; (iup-choose-file-save self title directory filename showhidden)      ;;;;
;;;; (iup-choose-dir self title directory showhidden)                     ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-choose-file-open (self title directory extfilter showhidden)
        (iup-choose-file-low self title "OPEN" directory undef extfilter false showhidden) )

(defun iup-choose-file-open-txt (self title directory showhidden)
        (iup-choose-file-open self title directory "TXT Files|*.txt|All Files|*.*|" showhidden) )

(defun iup-choose-file-save (self title directory filename showhidden)
        (iup-choose-file-low self title "SAVE" directory filename undef false showhidden) )

(defun iup-choose-dir (self title directory showhidden)
        (iup-choose-file-low self title "DIR" directory undef undef false showhidden) )

(defun iup-choose-file-low (self title type directory filename extfilter multiple showhidden) net iup-choose-file-low)
(defnet iup-choose-file-low (self title type directory filename extfilter multiple showhidden @path)
        (deflocal dlg i)

        (in type [ "OPEN" "SAVE" "DIR" ])
        (if (<> type "SAVE")
        then    (clr filename)
        else    (if (stringp filename)
                then    (set i (fullpath->name filename))
                        (if (<> i filename)
                        then    (set directory (fullpath->dir filename))
                                (set filename i) )))
        (alt    (seq    (path-fix directory directory)
                        (while (or (not (pathexists directory))
                                   (not (isdir (realpath directory))) ) do
                                (search "/" directory i (maxint))
                                (set directory (sub 0 i directory)) )
                        (path-fix-dir directory directory) )
                (set directory (currpath)) )
        (set dlg (iup-file-dlg))
        (iup-set-dlg-parent self dlg)
        (iup-set-str-attribute dlg "TITLE"
                (if (stringp title) title
                (if (= type "OPEN") $"Choose a file"
                (if (= type "SAVE") $"Save as"
                                    $"Choose a folder" ))))
        (iup-set-str-attribute dlg "DIALOGTYPE" type)
        (iup-set-str-attribute dlg "DIRECTORY" directory)
        (if (stringp filename)
        then    (iup-set-str-attribute dlg "FILE" filename) )
        (if (stringp extfilter)
        then    (iup-set-str-attribute dlg "EXTFILTER" extfilter) )
        (if (= type "OPEN")
        then    (iup-set-bool dlg "MULTIPLEFILES" multiple) )
        (iup-set-bool dlg "SHOWHIDDEN" showhidden)

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (if (= (iup-get-int dlg "STATUS") -1)
        then    (clr @path)
        else    (set @path (path-fix (iup-get-str-attribute dlg "VALUE")))
                (if (= type "DIR")
                then    (if (not (rmatch @path '/'))
                        then    (inc @path "/") )))

        (close dlg) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-choose-menu (a)
        (iup-choose-menu-xy a undef undef) )

(defun iup-choose-menu-xy (a x y) net iup-choose-menu-xy)
(defnet iup-choose-menu-xy (a x y @n)
        (deflocal menu item i)

        (set item (array (length a)))
        (for i in a do
                (set <item (for-pos)> (iup-item i))
                (iup-set-callback <item (for-pos)> "ACTION" (netptr iup-choose-menu-cb)) )
        (set menu (iup-menu item))
        (iup-popup menu (if (= x undef) (cmacro IUP_MOUSEPOS) x) (if (= y undef) (cmacro IUP_MOUSEPOS) y))
        (set i (iup-get-str-attribute menu "TRPCHOOSEMENU"))
        (close menu)
        (stringp i)
        (in i a @n) )

(defnet iup-choose-menu-cb (self)
        (iup-set-str-attribute (iup-get-parent self) "TRPCHOOSEMENU"
                (iup-get-str-attribute self "TITLE") ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-info (self msg) (iup-info-low self "Info" (pix-load-static "48x48/dialog-information-2.png") msg 0))
(defnet iup-warning (self msg) (iup-info-low self $"Warning" (pix-load-static "48x48/dialog-important-2.png") msg 0))
(defnet iup-error (self msg) (iup-info-low self $"Error" (pix-load-static "48x48/dialog-error-4.png") msg 0))

(defnet iup-info60 (self msg) (iup-info-low self "Info" (pix-load-static "48x48/dialog-information-2.png") msg 60))
(defnet iup-warning60 (self msg) (iup-info-low self $"Warning" (pix-load-static "48x48/dialog-important-2.png") msg 60))
(defnet iup-error60 (self msg) (iup-info-low self $"Error" (pix-load-static "48x48/dialog-error-4.png") msg 60))

(defnet iup-info-pix (self pix msg) (iup-info-low self "Info" pix msg 0))
(defnet iup-info60-pix (self pix msg) (iup-info-low self "Info" pix msg 60))

(defnet iup-info-low (self title pix msg maxlen)
        (deflocal q img hbox butbox dlg i)

        (set q (queue))

        (set i (iup-label))
        (set img (iup-image-rgba pix))
        (iup-set-attribute-handle i "IMAGE" img)
        (queue-put q img)

        (set msg (utf8-validate0 msg))
        (rtrim msg ' ' '\t' '\n' '\r')
        (if (> maxlen 0)
        then    (set msg (str-split msg maxlen)) )
        (inc msg nl)
        (set msg (iup-label msg))

        (set hbox (iup-hbox i msg))
        (iup-set-str-attribute hbox "ALIGNMENT" "ACENTER")
        (iup-set-int hbox "GAP" 14)

        (set butbox (iup-box-ok undef q))

        (set i (iup-vbox
                        hbox
                        butbox ))
        (iup-set-str-attribute i "MARGIN" "4x4")
        (iup-set-int i "GAP" 0)

        (set dlg (iup-dialog i))
        (iup-set-dlg-parent self dlg)
        (iup-set-str-attribute dlg "TITLE" (if (stringp title) title "Info"))
        (iup-set-bool dlg "DIALOGFRAME" true)
        (iup-set-attribute-handle dlg "DEFAULTENTER" (iup-box-ok-btn butbox))
        (iup-set-attribute-handle dlg "DEFAULTESC" (iup-box-ok-btn butbox))

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (close dlg)
        (iup-close-queue q) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defglobal _iup_confirm_lock)

(defnet iup-confirm (self msg) (iup-confirm-low self msg 0))

(defnet iup-confirm60 (self msg) (iup-confirm-low self msg 60))

(defnet iup-confirm-low (self msg maxlen)
        (deflocal q img hbox butbox dlg i)

        (set _iup_confirm_lock true)

        (set q (queue))

        (set i (iup-label))
        (set img (iup-image-rgba (pix-load-static "48x48/dialog-question-2.png")))
        (iup-set-attribute-handle i "IMAGE" img)
        (queue-put q img)

        (set msg (utf8-validate0 msg))
        (rtrim msg ' ' '\t' '\n' '\r')
        (if (> maxlen 0)
        then    (set msg (str-split msg maxlen)) )
        (inc msg nl)
        (set msg (iup-label msg))

        (set hbox (iup-hbox i msg))
        (iup-set-str-attribute hbox "ALIGNMENT" "ACENTER")
        (iup-set-int hbox "GAP" 14)

        (set butbox (iup-box-confirm-cancel undef undef q))

        (set i (iup-vbox
                        hbox
                        butbox ))
        (iup-set-str-attribute i "MARGIN" "4x4")
        (iup-set-int i "GAP" 0)

        (set dlg (iup-dialog i))
        (iup-set-dlg-parent self dlg)
        (iup-set-callback dlg "K_ANY" (netptr iup-confirm-cb))
        (iup-set-str-attribute dlg "TITLE" $"Confirmation request")
        (iup-set-bool dlg "DIALOGFRAME" true)
        ; notare che defaultenter è il pulsante annulla
        ; perché vogliamo che l'utente confermi cliccando sul pulsante conferma
        ;(iup-set-attribute-handle dlg "DEFAULTENTER" (iup-box-ok-cancel-btn-cancel butbox))
        ;(iup-set-attribute-handle dlg "DEFAULTESC" (iup-box-ok-cancel-btn-cancel butbox))
        (iup-set-int dlg "STATUS" 0)

        (iup-post-call (netptr iup-confirm-unlock))

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (set i (iup-get-int dlg "STATUS"))
        (close dlg)
        (iup-close-queue q)
        (= i 1) )

(defnet iup-confirm-unlock ()
        (set _iup_confirm_lock false) )

(defnet iup-confirm-cb (dlg c)
        (if (not _iup_confirm_lock)
        then    (case c of
                        (cmacro K_y)    (iup-ok-cb dlg)
                        (cmacro K_s)    (iup-ok-cb dlg)
                        (cmacro K_ESC)  (iup-cancel-cb dlg)
                        (cmacro K_n)    (iup-cancel-cb dlg)
                        default         (fail) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-edit-string (self title label @s)
        (iup-edit-string-low self title label false undef undef @s) )

(defnet iup-edit-string-with-mask (self title label mask @s)
        (iup-edit-string-low self title label false undef mask @s) )

(defnet iup-edit-password (self title label @s)
        (iup-edit-string-low self title label true undef undef @s) )

(defnet iup-edit-string-hints (self title label hints @s)
        (iup-edit-string-low self title label false hints undef @s) )

(defnet iup-edit-string-low (self title label password hints mask @s)
        (deflocal q text hbox butbox dlg i)

        (set q (queue))

        (set i (length hints))
        (if (and (integerp i) (> i 0))
        then    (set text (iup-list))
                (iup-set-bool text "DROPDOWN" true)
                (iup-set-bool text "EDITBOX" true)
                (for i in hints do
                        (iup-set-str-attribute text (+ (for-pos) 1) (utf8-validate0 i)) )
        else    (set text (iup-text))
                (iup-set-bool text "PASSWORD" password) )
        (if (stringp mask)
        then    (iup-set-str-attribute text "MASK" mask)
                (iup-set-int text "VISIBLECOLUMNS" 6)
        else    (iup-set-int text "VISIBLECOLUMNS" 40) )
        (iup-set-str-attribute text "VALUE" (if (stringp @s) (utf8-validate0 @s) ""))

        (if (not (stringp label))
        then    (set label (sprint label)) )
        (set label (utf8-validate0 label))
        (inc label ":")
        (if (search "\n" label)
        then    (inc label "\n") )
        (set hbox (iup-hbox (iup-label label) text))
        (iup-set-str-attribute hbox "ALIGNMENT" "ACENTER")
        (iup-set-int hbox "GAP" 10)

        (set butbox (iup-box-confirm-cancel undef undef q))

        (set i (iup-vbox
                        hbox
                        butbox ))
        (iup-set-str-attribute i "MARGIN" "4x4")
        (iup-set-int i "GAP" 0)

        (set dlg (iup-dialog i))
        (iup-set-dlg-parent self dlg)
        (iup-set-str-attribute dlg "TITLE" (if (stringp title) title $"Data input"))
        (iup-set-bool dlg "DIALOGFRAME" true)
        (iup-set-attribute-handle dlg "DEFAULTENTER" (iup-box-ok-cancel-btn-ok butbox))
        (iup-set-attribute-handle dlg "DEFAULTESC" (iup-box-ok-cancel-btn-cancel butbox))
        (iup-set-int dlg "STATUS" 0)

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (set i (iup-get-int dlg "STATUS"))
        (set @s (iup-get-str-attribute text "VALUE"))
        (close dlg)
        (iup-close-queue q)
        (= i 1) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-button-font (initial-font) net iup-button-font)
(defnet iup-button-font (initial-font @but)
        (set @but (iup-button))
        (iup-set-str-attribute @but "TRPFONT" initial-font)
        (iup-set-str-attribute @but "TITLE" initial-font)
        (iup-set-callback @but "ACTION" (netptr iup-button-font-cb)) )

(defun iup-button-font-value (but)
        (iup-get-str-attribute but "TRPFONT") )

(defnet iup-button-font-cb (but)
        (deflocal oldfont newfont)

        (opt    (set oldfont (iup-get-str-attribute but "TRPFONT"))
                (set newfont (iup-choose-font but oldfont))
                (stringp newfont)
                (<> newfont oldfont)
                (iup-set-str-attribute but "TRPFONT" newfont)
                (iup-set-str-attribute but "TITLE" newfont) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-button-color (initial-color) net iup-button-color)
(defnet iup-button-color (initial-color @but)
        (set @but (iup-button))
        (iup-set-bgcolor @but initial-color)
        (iup-set-str-attribute @but "RASTERSIZE" "32x32")
        (iup-set-callback @but "ACTION" (netptr iup-button-color-cb)) )

(defnet iup-button-color-cb (but)
        (deflocal oldcolor newcolor)

        (opt    (set oldcolor (iup-bgcolor but))
                (set newcolor (iup-choose-color but oldcolor))
                (pixp newcolor)
                (<> newcolor oldcolor)
                (iup-set-bgcolor but newcolor) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-list->menu (l) net iup-list->menu)
(defnet iup-list->menu (l @wid)
        (deflocal q item)

        (listp l)
        (set q (queue))
        (while (<> l nil) do
                (list-pop l item)
                (queue-put q (iup-list->menu-item item)) )
        (set @wid (iup-menu q)) )

(defun iup-list->menu-item (item) net iup-list->menu-item)
(defnet iup-list->menu-item (item @wid)
        (deflocal title state icon asc asckey l i m)

        (if (listp item)
        then    (list-pop item title)
                (if (listp title)
                then    (set l title)
                        (list-pop l title)
                        (while (<> l nil) do
                                (list-pop l i)
                                (if (booleanp i)
                                then    (set state i)
                                else    (set m (car i))
                                        (if (pixp m)
                                        then    (if (and (= (width m) 16) (= (height m) 16))
                                                then    (set icon (iup-image-rgba m))
                                                else    (set m (pix-scale m 16 16))
                                                        (set icon (iup-image-rgba m))
                                                        (close m) )
                                                (queue-put (cdr i) icon)
                                        else    (set asc m)
                                                (set asckey (cdr i)) ))))
                ; title deve essere una stringa
                (if (cmingw)
                then    (opt    (search "\t" title i)
                                (inc i)
                                (set title (+ (sub 0 i title) (ltrim (sub i (maxint) title) '\t'))) ))
                (if (listp item)
                then    (set @wid (iup-submenu title (iup-list->menu item)))
                else    ; item deve essere un puntatore a rete
                        (set @wid (iup-item title))
                        (iup-set-callback @wid "ACTION" item) )
                (if (booleanp state)
                then    (iup-set-bool @wid "VALUE" state) )
                (if (<> icon undef)
                then    (iup-set-attribute-handle @wid "IMAGE" icon) )
                (if (assocp asc)
                then    (set <asc asckey> @wid) )
        else    ; item deve essere di tipo iup (iup-separator)
                (set @wid item) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-frame-with-margin (title wid) net iup-frame-with-margin)
(defnet iup-frame-with-margin (title wid @wid)
        (deflocal vbox hbox)

        (if (iup-gtk3)
        then    ; hack necessario per gtk3...
                (set hbox (iup-hbox))
                (iup-set-str-attribute hbox "MARGIN" "0x2")
                (set vbox (iup-vbox wid hbox))
        else    (set vbox (iup-vbox wid)) )
        (iup-set-str-attribute vbox "MARGIN" "2x2")
        (set @wid (iup-frame vbox))
        (iup-set-str-attribute @wid "TITLE" title)
        (iup-set-int @wid "MINSIZE" (ceil (* (utf8-length title) 9))) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-text-spin (vmin vmax vcur) net iup-text-spin)
(defnet iup-text-spin (vmin vmax vcur @wid)
        (set @wid (iup-text))
        (iup-set-str-attribute @wid "MASK"
                (if (< vmin 0) "[+/-]?/d+" "/d+") )
        (iup-set-bool @wid "SPIN" true)
        (iup-set-int @wid "SPINMIN" vmin)
        (iup-set-int @wid "SPINMAX" vmax)
        (iup-set-int @wid "SPINVALUE" vcur) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-text-spin-ratio (vmin vmax vcur vinc) net iup-text-spin-ratio)
(defnet iup-text-spin-ratio (vmin vmax vcur vinc @wid)
        (deflocal spinmax)

        (set spinmax (rint (/ (- vmax vmin) vinc)))
        (set @wid (iup-text))
        (iup-set-str-attribute @wid "MASK"
                (if (< vmin 0) "[+/-]?(/d+/.?/d*|/./d+)" "(/d+/.?/d*|/./d+)") )
        (iup-set-bool @wid "SPIN" true)
        (iup-set-bool @wid "SPINAUTO" false)
        (iup-set-int @wid "SPINMAX" spinmax)
        (iup-set-int @wid "SPINVALUE" (rint (/ (* spinmax (- vcur vmin)) (- vmax vmin))))
        (iup-set-str-attribute @wid "TRPVMIN" (approx3 vmin))
        (iup-set-str-attribute @wid "TRPVMAX" (approx3 (/ (- vmax vmin) spinmax)))
        (iup-set-str-attribute @wid "VALUE" (approx3 vcur))
        (iup-set-callback @wid "SPIN_CB" (netptr iup-text-spin-ratio-cb))
        (iup-set-callback @wid "VALUECHANGED_CB" (netptr iup-text-spin-ratio-changed-cb)) )

(defnet iup-text-spin-ratio-cb (spin v)
        (iup-set-str-attribute spin "VALUE" (approx3
                (+ (str->num (iup-get-str-attribute spin "TRPVMIN"))
                   (* v (str->num (iup-get-str-attribute spin "TRPVMAX"))) ))))

(defnet iup-text-spin-ratio-changed-cb (spin)
        (deflocal v vmin vmax smax)

        (opt    (set v (str->num (iup-get-str-attribute spin "VALUE")))
                (rationalp v)
                (set v (rint (/ (- v (str->num (iup-get-str-attribute spin "TRPVMIN")))
                                (str->num (iup-get-str-attribute spin "TRPVMAX")) )))
                (in v 0 .. (iup-get-int spin "SPINMAX"))
                (iup-set-int spin "SPINVALUE" v) ))

(defun iup-text-spin-ratio-val (spin) net iup-text-spin-ratio-val)
(defnet iup-text-spin-ratio-val (spin @v)
        (deflocal vmin vmax smax)

        (set @v (str->num (iup-get-str-attribute spin "VALUE")))
        (set vmin (str->num (iup-get-str-attribute spin "TRPVMIN")))
        (set vmax (str->num (iup-get-str-attribute spin "TRPVMAX")))
        (alt    (seq    (rationalp @v)
                        (if (< @v vmin)
                        then    (iup-set-int spin "SPINVALUE" 0)
                                (fail) )
                        (set smax (iup-get-int spin "SPINMAX"))
                        (if (> @v (+ vmin (* vmax smax)))
                        then    (iup-set-int spin "SPINVALUE" smax)
                                (fail) ))
                (set @v (+ vmin (* (iup-get-int spin "SPINVALUE") vmax))) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-text-buffer () net iup-text-buffer)
(defnet iup-text-buffer (@buf)
        (set @buf (array 3))
        (set <@buf 0> "")
        (set <@buf 1> 0)
        (set <@buf 2> (queue)) )

(defnet iup-text-buffer-append (buf msg)
        (iup-text-buffer-append-color buf undef msg) )

(defnet iup-text-buffer-append-nl (buf)
        (iup-text-buffer-append buf "\n") )

(defnet iup-text-buffer-append-color (buf color msg)
        (deflocal i j)

        (if (not (stringp msg))
        then    (set msg (sprint msg)) )
        (set j (utf8-length msg))
        (if (not (integerp j))
        then    (set msg (iso->utf8 msg))
                (set j (utf8-length msg)) )
        (inc <buf 0> msg)
        (set i <buf 1>)
        (inc j i)
        (set <buf 1> j)
        (if (<> color undef)
        then    (queue-put <buf 2> (list i j color)) ))

(defnet iup-text-buffer-cat (buf buf2)
        (deflocal n q i)

        (set n <buf 1>)
        (set q <buf 2>)
        (inc <buf 0> <buf2 0>)
        (inc <buf 1> <buf2 1>)
        (for i in <buf2 2> do
                (queue-put q (list (+ <i 0> n) (+ <i 1> n) <i 2>)) ))

(defnet iup-text-buffer-flush (buf wid)
        (deflocal uu u color i)

        (iup-set-str-attribute wid "VALUE" <buf 0>)
        (set uu (iup-user))
        (iup-set-bool uu "BULK" true)
        (iup-set-bool uu "CLEANOUT" true)
        (for i in <buf 2> do
                (set u (iup-user))
                (set color <i 2>)
                (iup-set-str-attribute u "SELECTIONPOS" <i 0> ":" <i 1>)
                (iup-set-fgcolor u color)
                (iup-append uu u) )
        (if false ; (cmingw)
        then    (set u (iup-user))
                (iup-set-str-attribute u "FONTSCALE" 1.1)
                (iup-set-str-attribute u "SELECTIONPOS" "0:" <buf 1>)
                (iup-append uu u) )
        (iup-set-attribute wid "ADDFORMATTAG_HANDLE" uu) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-text-set-and-go-home (wid msg)
        (iup-text-append-low wid (iup-fgcolor wid) msg false true) )

(defnet iup-text-set-and-go-end (wid msg)
        (iup-text-append-low wid (iup-fgcolor wid) msg false false) )

(defnet iup-text-set-and-go-home-color (wid color msg)
        (iup-text-append-low wid color msg false true) )

(defnet iup-text-set-and-go-end-color (wid color msg)
        (iup-text-append-low wid color msg false false) )

(defnet iup-text-append-and-go-home (wid msg)
        (iup-text-append-low wid (iup-fgcolor wid) msg true true) )

(defnet iup-text-append-and-go-end (wid msg)
        (iup-text-append-low wid (iup-fgcolor wid) msg true false) )

(defnet iup-text-append-and-go-home-color (wid color msg)
        (iup-text-append-low wid color msg true true) )

(defnet iup-text-append-and-go-end-color (wid color msg)
        (iup-text-append-low wid color msg true false) )

(defnet iup-text-clear (wid)
        (iup-text-set-and-go-home wid "") )

(defnet iup-text-append-low (wid color msg append home)
        (deflocal i j u)

        (if append
        then    (set i (iup-get-int wid "COUNT"))
                (iup-set-str-attribute wid "APPEND" msg)
        else    (set i 0)
                (iup-set-str-attribute wid "VALUE" msg) )
        (set j (iup-get-int wid "COUNT"))
        (if (<> color undef)
        then    (set u (iup-user))
                (iup-set-str-attribute u "SELECTIONPOS" i ":" j)
                (iup-set-fgcolor u color)
                (iup-set-attribute wid "ADDFORMATTAG_HANDLE" u) )
        (iup-set-int wid "CARETPOS" (if home 0 j)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-text-generic (value wrap) net iup-text-generic)
(defnet iup-text-generic (value wrap @wid)
        (set @wid (iup-text))
        (iup-set-bool @wid "MULTILINE" true)
        (iup-set-bool @wid "READONLY" true)
        (iup-set-bool @wid "EXPAND" true)
        (iup-set-bool @wid "WORDWRAP" wrap)
        (iup-set-str-attribute @wid "PADDING" "2x0")
        (iup-set-str-attribute @wid "VALUE" value)
        (iup-set-int @wid "VISIBLELINES" 1)
        (iup-set-int @wid "VISIBLECOLUMNS" 1)
        (iup-set-int @wid "CARETPOS" 0) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-progress-delay () 0.01)

(defnet iup-progress (th parent title marquee interruptible label timers th-join)
        (deflocal start-time thclk q vbox box gauge gauge-aux dlg lbl lbl-trun lbl-ttot lbl-trem lbl-tend x y aborted done cnt msg)

        (threadp th)

        (set start-time (now))

        (set thclk (thread-create (netptr iup-progress-clock-th) (thread-self)))
        (threadp thclk)

        (set q (queue))

        (if (= marquee "aux")
        then    (set marquee false)
                (set gauge-aux true) )

        (set vbox (iup-vbox))

        (if timers
        then    (set box (iup-hbox))
                (set lbl-trun (iup-label "00:00:00"))
                (iup-append box (iup-label "run "))
                (iup-append box lbl-trun)
                (if (not marquee)
                then    (set lbl-ttot (iup-label "99:59:59"))
                        (set lbl-trem (iup-label "99:59:59"))
                        (set lbl-tend (iup-label (date-trunc-hhmmss (+ (now) (+ (* (+ (* 99 60) 59) 60) 59)))))
                        (iup-append box (iup-label " - tot "))
                        (iup-append box lbl-ttot)
                        (iup-append box (iup-label " - rem "))
                        (iup-append box lbl-trem)
                        (iup-append box (iup-label " - end "))
                        (iup-append box lbl-tend) )
                (iup-set-str-attribute box "MARGIN" "0x0")
                (iup-set-int box "GAP" 0)
                (iup-append vbox box) )

        (if marquee
        then    (set gauge (iup-progress-bar))
                (iup-set-bool gauge "MARQUEE" true)
        else    (set gauge (iup-gauge))
                (iup-set-bool gauge "SHOWTEXT" true) )
        (iup-set-str-attribute gauge "RASTERSIZE" "520x30")
        (iup-set-str-attribute gauge "FGCOLOR" "0 120 220")
        (iup-set-str-attribute gauge "EXPAND" "HORIZONTAL")

        (if (= gauge-aux undef)
        then    (set box gauge)
        else    (set gauge-aux (iup-gauge))
                (iup-set-bool gauge-aux "SHOWTEXT" true)
                (iup-set-str-attribute gauge-aux "RASTERSIZE" "520x30")
                (iup-set-str-attribute gauge-aux "FGCOLOR" "0 120 220")
                (iup-set-str-attribute gauge-aux "EXPAND" "HORIZONTAL")
                (set box (iup-vbox gauge gauge-aux))
                (iup-set-str-attribute box "MARGIN" "0x0")
                (iup-set-int box "GAP" 4) )
        (iup-append vbox box)

        (if (or label interruptible)
        then    (set box (iup-hbox))

                (if label
                then    (set lbl (iup-label ""))
                        (iup-set-str-attribute lbl "EXPAND" "HORIZONTAL")
                        (iup-set-bool lbl "ELLIPSIS" true)
                        (iup-append box lbl)
                else    (iup-append box (iup-fill)) )

                (if interruptible
                then    (set cnt (iup-button-icon $"Abort" (netptr iup-progress-abort-cb) (pix-load-static "16x16/dialog-cancel-3.png") q))
                        (iup-set-bool cnt "EXPAND" false)
                        (iup-append box cnt) )

                (iup-append vbox box)
                (iup-set-str-attribute box "ALIGNMENT" "ACENTER")
                (iup-set-str-attribute box "MARGIN" "0x0")
                (iup-set-int box "GAP" 4) )

        (iup-set-str-attribute vbox "MARGIN" "6x6")
        (iup-set-int vbox "GAP" 4)

        (set dlg (iup-dialog vbox))
        (iup-set-int dlg "TRP_ABORTED" 0)
        (if (= parent undef)
        then    (set x (cmacro IUP_CENTER))
                (set y (cmacro IUP_CENTER))
        else    (iup-set-dlg-parent parent dlg)
                (set x (cmacro IUP_CENTERPARENT))
                (set y (cmacro IUP_CENTERPARENT)) )
        (if (<> title undef)
        then    (iup-set-str-attribute dlg "TITLE" title) )
        (iup-set-bool dlg "DIALOGFRAME" true)
        (iup-set-bool dlg "SIMULATEMODAL" true)
        (iup-set-callback dlg "CLOSE_CB" (netptr iup-success-cb))
        (if interruptible
        then    (iup-set-callback dlg "K_ANY" (netptr iup-progress-kb-cb)) )

        (iup-show-xy dlg x y)
        (iup-flush)

        (set aborted false)
        (set done false)
        (set cnt 0)

        (send (iup-progress-delay) to thclk)

        (thread-case*

            priority 1 (not done) (receive msg from th) ->
                (alt    (seq    (= msg "q")
                                (set done true) )
                        (seq    (= msg "a")
                                (set done true)
                                (set aborted true) )
                        (seq    (= (car msg) "m")
                                (if label
                                then    (iup-label-set lbl (cdr msg))
                                        (iup-flush) ))
                        (seq    (rationalp msg)
                                (in msg 0 .. 1)
                                (if (not marquee)
                                then    (iup-set-double gauge "VALUE" msg)
                                        (if (and timers (> msg 0))
                                        then    (set x (- (now) start-time))
                                                (set y (linear 1 0 msg 0 x))
                                                (iup-label-set lbl-trun (date-s2hhmmss x))
                                                (iup-label-set lbl-ttot (date-s2hhmmss y))
                                                (iup-label-set lbl-trem (date-s2hhmmss (- y x)))
                                                (iup-label-set lbl-tend (date-trunc-hhmmss (+ start-time y))) )
                                        (iup-flush) ))
                        (seq    (= (car msg) "aux")
                                (set msg (cdr msg))
                                (rationalp msg)
                                (in msg 0 .. 1)
                                (if (<> gauge-aux undef)
                                then    (iup-set-double gauge-aux "VALUE" msg)
                                        (iup-flush) ))
                        (seq    (= msg "dlg")
                                (send dlg to th) )
                        (seq    (= msg "r")
                                (set start-time (now)) )
                        (success) )

         [] priority 0 (not done) (receive msg from thclk) ->
                (inc cnt)
                (if (= (% cnt 5) 0)
                then    (if (= cnt 30)
                        then    (set cnt 0)
                                (if timers
                                then    (iup-label-set lbl-trun (date-s2hhmmss (- (now) start-time))) ))
                        (iup-flush) )
                (send (iup-progress-delay) to thclk) )

        (if th-join
        then    (thread-join th) )

        (receive msg from thclk)
        (send undef to thclk)
        (thread-join thclk)

        (iup-set-bool dlg "SIMULATEMODAL" false)
        (close dlg)
        (iup-close-queue q)

        (not aborted) )

(defnet iup-progress-kb-cb (dlg c)
        (case c of
                (cmacro K_ESC)  (iup-progress-abort-cb dlg)
                default         (fail) ))

(defnet iup-progress-clock-th (th)
        (deflocal delay)

        (repeat (receive delay from th)
                until (= delay undef)
                (sleep delay)
                (send true to th) ))

(defnet iup-progress-abort-cb (self)
        (set self (iup-get-dialog self))
        (opt    (= (iup-get-int self "TRP_ABORTED") 0)
                (iup-confirm60 self
                        (+ $"The current operation will be aborted." nl
                           $"Are you sure?" ))
                (iup-set-active self false)
                (iup-set-int self "TRP_ABORTED" 1) )
        (iup-set-bool self "SIMULATEMODAL" true) )

(defun iup-progress-aborted (dlg)
        (= (iup-get-int dlg "TRP_ABORTED") 1) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-image-rgba-hacked (pix) net iup-image-rgba-hacked)
(defnet iup-image-rgba-hacked (pix @img)
        (deflocal hpix)

        (pixp pix)
        (set hpix (pix-create (+ 4 (width pix)) (+ 4 (height pix))))
        (pixp hpix)
        (pix-draw-box hpix 0 0 (width hpix) (height hpix) (pix-color 0 0 0 0))
        (pix-draw-pix hpix 0 2 pix)
        (set @img (iup-image-rgba hpix))
        (close hpix) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

