;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-gtk2 ()
        (if (clinux)
                (lmatch (iup-get-global "GTKVERSION") "2.")
                false ))

(defun iup-gtk3 ()
        (if (clinux)
                (lmatch (iup-get-global "GTKVERSION") "3.")
                false ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-set-lang ()
        (set-lang (if (lmatch case (iup-get-global "SYSTEMLANGUAGE") "it") 1 0)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-set-dlg-parent (self dlg)
        (if (<> self undef)
        then    (iup-set-attribute-handle dlg "PARENTDIALOG" (iup-get-dialog self)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-set-bool (wid attribute val)
        (booleanp val)
        (iup-set-str-attribute wid attribute (if val "YES" "NO")) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-ok-cb (self)
        (iup-set-int (iup-get-dialog self) "STATUS" 1)
        (iup-exit-loop) )

(defnet iup-cancel-cb (self)
        (iup-exit-loop) )

(defnet iup-success-cb (self)
        (success) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-close-queue (q)
        (deflocal wid)

        (for wid in q do
                (close wid) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;; (iup-button-icon title cback iconpix q)                              ;;;;
;;;; (iup-button-icon-ok cback q)                                         ;;;;
;;;; (iup-button-icon-confirm cback q)                                    ;;;;
;;;; (iup-button-icon-cancel cback q)                                     ;;;;
;;;; (iup-box-ok cback q)                                                 ;;;;
;;;; (iup-box-ok-btn butbox)                                              ;;;;
;;;; (iup-box-ok-cancel cback-ok cback-cancel q)                          ;;;;
;;;; (iup-box-confirm-cancel cback-ok cback-cancel q)                     ;;;;
;;;; (iup-box-ok-cancel-btn-ok butbox)                                    ;;;;
;;;; (iup-box-ok-cancel-btn-cancel butbox)                                ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-button-icon (title cback iconpix q) net iup-button-icon)
(defnet iup-button-icon (title cback iconpix q @wid)
        (deflocal padding spacing img)

        (if (stringp title)
        then    (set @wid (iup-button title))
                (set padding "2x2")
                (set spacing 6)
        else    (set @wid (iup-button))
                (set padding "0x0")
                (set spacing 0) )
        (iup-set-callback @wid "ACTION" cback)
        (set img (iup-image-rgba iconpix))
        (iup-set-attribute-handle @wid "IMAGE" img)
        (iup-set-str-attribute @wid "PADDING" padding)
        (iup-set-int @wid "SPACING" spacing)
        (queue-put q img) )

(defun iup-button-icon-ok-low (title cback q)
        (iup-button-icon title (if (<> cback undef) cback (netptr iup-ok-cb)) (pix-load-static "16x16/dialog-apply.png") q) )

(defun iup-button-icon-ok (cback q)
        (iup-button-icon-ok-low "Ok" cback q) )

(defun iup-button-icon-confirm (cback q)
        (iup-button-icon-ok-low $"Confirm" cback q) )

(defun iup-button-icon-cancel (cback q)
        (iup-button-icon $"Cancel" (if (<> cback undef) cback (netptr iup-cancel-cb)) (pix-load-static "16x16/dialog-cancel-3.png") q) )

(defun iup-box-ok (cback q) net iup-box-ok)
(defnet iup-box-ok (cback q @wid)
        (deflocal pre sep btn-ok hbox)

        (set pre (iup-hbox))
        (iup-set-str-attribute pre "MARGIN" "0x3")

        (set sep (iup-label))
        (iup-set-str-attribute sep "SEPARATOR" "HORIZONTAL")

        (set btn-ok (iup-button-icon-ok cback q))
        (iup-set-str-attribute btn-ok "CANFOCUS" (if (cmingw) "YES" "NO"))

        (set hbox (iup-hbox
                (iup-fill)
                btn-ok
                (iup-fill) ))

        (set @wid (iup-vbox pre sep hbox))
        (iup-set-str-attribute @wid "MARGIN" "6x6")
        (iup-set-int @wid "GAP" 4) )

(defun iup-box-ok-btn (butbox)
        <butbox 2 1> )

(defun iup-box-ok-cancel-low (title-ok cback-ok cback-cancel q) net iup-box-ok-cancel-low)
(defnet iup-box-ok-cancel-low (title-ok cback-ok cback-cancel q @wid)
        (deflocal pre sep btn-ok btn-cancel hbox)

        (set pre (iup-hbox))
        (iup-set-str-attribute pre "MARGIN" "0x3")

        (set sep (iup-label))
        (iup-set-str-attribute sep "SEPARATOR" "HORIZONTAL")

        (set btn-ok (iup-button-icon-ok-low title-ok cback-ok q))
        (iup-set-str-attribute btn-ok "CANFOCUS" (if (cmingw) "YES" "NO"))
        (set btn-cancel (iup-button-icon-cancel cback-cancel q))
        (iup-set-str-attribute btn-cancel "CANFOCUS" (if (cmingw) "YES" "NO"))

        (set hbox (iup-hbox
                (iup-fill)
                btn-ok
                btn-cancel ))

        (set @wid (iup-vbox pre sep hbox))
        (iup-set-str-attribute @wid "MARGIN" "6x6")
        (iup-set-int @wid "GAP" 4) )

(defun iup-box-ok-cancel (cback-ok cback-cancel q)
        (iup-box-ok-cancel-low "Ok" cback-ok cback-cancel q) )

(defun iup-box-confirm-cancel (cback-ok cback-cancel q)
        (iup-box-ok-cancel-low $"Confirm" cback-ok cback-cancel q) )

(defun iup-box-ok-cancel-btn-ok (butbox)
        <butbox 2 1> )

(defun iup-box-ok-cancel-btn-cancel (butbox)
        <butbox 2 2> )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-choose-date (self date) net iup-choose-date)
(defnet iup-choose-date (self date @date)
        (deflocal q cal butbox vbox dlg)

        (set q (queue))

        (set cal (iup-choose-date-calendar date))

        (set butbox (iup-box-ok-cancel undef undef q))

        (set vbox (iup-vbox cal butbox))
        (iup-set-str-attribute vbox "MARGIN" "6x6")
        (iup-set-int vbox "GAP" 0)

        (set dlg (iup-dialog vbox))
        (iup-set-dlg-parent self dlg)
        (iup-set-str-attribute dlg "TITLE" $"Choose a date")
        (iup-set-bool dlg "DIALOGFRAME" true)
        (iup-set-attribute-handle dlg "DEFAULTENTER" (iup-box-ok-cancel-btn-ok butbox))
        (iup-set-attribute-handle dlg "DEFAULTESC" (iup-box-ok-cancel-btn-cancel butbox))
        (iup-set-int dlg "STATUS" 0)

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (if (= (iup-get-int dlg "STATUS") 1)
        then    (set @date (iup-choose-date-parse (iup-get-str-attribute cal "VALUE")))
        else    (clr @date) )

        (close dlg)
        (iup-close-queue q) )

(defun iup-choose-date-calendar (date) net iup-choose-date-calendar)
(defnet iup-choose-date-calendar (date @wid)
        (deflocal mm gg)

        (if (not (datep date))
        then    (set date (now)) )
        (set mm (date-month date))
        (set gg (date-day date))
        (set @wid (iup-calendar))
        (iup-set-str-attribute @wid "VALUE"
                (sprint (date-year date) "/"
                        (if (integerp mm) mm 1) "/"
                        (if (integerp gg) gg 1) )))

(defun iup-choose-date-parse (s) net iup-choose-date-parse)
(defnet iup-choose-date-parse (s @date)
        (deflocal i aa)

        (search "/" s i)
        (set aa (str->num (sub 0 i s)))
        (set s (sub (+ i 1) (maxint) s))
        (search "/" s i)
        (set @date (date aa (str->num (sub 0 i s)) (str->num (sub (+ i 1) (maxint) s))))
        (datep @date) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-choose-font (self font) net iup-choose-font)
(defnet iup-choose-font (self font @font)
        (deflocal dlg)

        (set dlg (iup-font-dlg))
        (iup-set-dlg-parent self dlg)
        (iup-set-str-attribute dlg "TITLE" $"Choose a font")
        (iup-set-bool dlg "DIALOGFRAME" true)
        (if (stringp font)
        then    (iup-set-str-attribute dlg "VALUE" font) )

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (if (= (iup-get-int dlg "STATUS") 1)
        then    (set @font (iup-get-str-attribute dlg "VALUE"))
        else    (clr @font) )

        (close dlg) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-choose-color (self color)
        (iup-choose-color-low false self color) )

(defun iup-choose-color-alpha (self color)
        (iup-choose-color-low true self color) )

(defun iup-choose-color-low (alpha self color) net iup-choose-color-low)
(defnet iup-choose-color-low (alpha self color @color)
        (deflocal dlg)

        (set dlg (iup-color-dlg))
        (iup-set-dlg-parent self dlg)
        (iup-set-str-attribute dlg "TITLE" $"Choose a color")
        (iup-set-bool dlg "DIALOGFRAME" true)
        (iup-set-bool dlg "SHOWCOLORTABLE" true)
        (iup-set-bool dlg "SHOWHEX" true)
        (iup-set-bool dlg "SHOWALPHA" alpha)
        (if (colorp color)
        then    (iup-set-str-attribute dlg "VALUE" (sprint (pix-color-red color) " " (pix-color-green color) " " (pix-color-blue color)))
                (if alpha
                then    (iup-set-int dlg "ALPHA" (pix-color-alpha color)) ))

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (if (= (iup-get-int dlg "STATUS") 1)
        then    (set @color (iup-choose-color-parse (iup-get-str-attribute dlg "VALUE")))
        else    (clr @color) )

        (close dlg) )

(defun iup-choose-color-parse (s) net iup-choose-color-parse)
(defnet iup-choose-color-parse (s @color)
        (deflocal r g b)

        (search-and-cut " " s r)
        (search-and-cut " " s g)
        (alt    (seq    (search-and-cut " " s b)
                        (set @color (pix-color (str->num r) (str->num g) (str->num b) (str->num s))) )
                (set @color (pix-color (str->num r) (str->num g) (str->num s))) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;; (iup-choose-file-open self title directory extfilter showhidden)     ;;;;
;;;; (iup-choose-file-open-txt self title directory showhidden)           ;;;;
;;;; (iup-choose-file-save self title directory filename showhidden)      ;;;;
;;;; (iup-choose-dir self title directory showhidden)                     ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-choose-file-open (self title directory extfilter showhidden)
        (iup-choose-file-low self title "OPEN" directory undef extfilter false showhidden) )

(defun iup-choose-file-open-txt (self title directory showhidden)
        (iup-choose-file-open self title directory "TXT Files|*.txt|All Files|*.*|" showhidden) )

(defun iup-choose-file-save (self title directory filename showhidden)
        (iup-choose-file-low self title "SAVE" directory filename undef false showhidden) )

(defun iup-choose-dir (self title directory showhidden)
        (iup-choose-file-low self title "DIR" directory undef undef false showhidden) )

(defun iup-choose-file-low (self title type directory filename extfilter multiple showhidden) net iup-choose-file-low)
(defnet iup-choose-file-low (self title type directory filename extfilter multiple showhidden @path)
        (deflocal dlg i j)

        (in type [ "OPEN" "SAVE" "DIR" ])
        (if (<> type "SAVE")
        then    (clr filename)
        else    (if (stringp filename)
                then    (set i (fullpath->name filename))
                        (if (<> i filename)
                        then    (set directory (fullpath->dir filename))
                                (set filename i) )))
        (alt    (seq    (stringp directory)
                        (set i (sprint (path-separator directory)))
                        (while (or (not (pathexists directory))
                                   (not (isdir (realpath directory))) ) do
                                (search i directory j (maxint))
                                (set directory (sub 0 j directory)) )
                        (if (not (rmatch directory i))
                        then    (inc directory i) ))
                (set directory (currpath)) )
        (set dlg (iup-file-dlg))
        (iup-set-dlg-parent self dlg)
        (iup-set-str-attribute dlg "TITLE"
                (if (stringp title) title
                (if (= type "OPEN") $"Choose a file"
                (if (= type "SAVE") $"Save as"
                                    $"Choose a folder" ))))
        (iup-set-str-attribute dlg "DIALOGTYPE" type)
        (iup-set-str-attribute dlg "DIRECTORY" directory)
        (if (stringp filename)
        then    (iup-set-str-attribute dlg "FILE" filename) )
        (if (stringp extfilter)
        then    (iup-set-str-attribute dlg "EXTFILTER" extfilter) )
        (if (= type "OPEN")
        then    (iup-set-bool dlg "MULTIPLEFILES" multiple) )
        (iup-set-bool dlg "SHOWHIDDEN" showhidden)

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (if (= (iup-get-int dlg "STATUS") -1)
        then    (clr @path)
        else    (set @path (iup-get-str-attribute dlg "VALUE"))
                (if (= type "DIR")
                then    (set i (path-separator @path))
                        (if (not (rmatch @path i))
                        then    (inc @path i) )))

        (close dlg) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-choose-menu (a)
        (iup-choose-menu-xy a undef undef) )

(defun iup-choose-menu-xy (a x y) net iup-choose-menu-xy)
(defnet iup-choose-menu-xy (a x y @n)
        (deflocal menu item i)

        (set item (array (length a)))
        (for i in a do
                (set <item (for-pos)> (iup-item i))
                (iup-set-callback <item (for-pos)> "ACTION" (netptr iup-choose-menu-cb)) )
        (set menu (iup-menu item))
        (iup-popup menu (if (= x undef) (cmacro IUP_MOUSEPOS) x) (if (= y undef) (cmacro IUP_MOUSEPOS) y))
        (set i (iup-get-str-attribute menu "TRPCHOOSEMENU"))
        (close menu)
        (stringp i)
        (in i a @n) )

(defnet iup-choose-menu-cb (self)
        (iup-set-str-attribute (iup-get-parent self) "TRPCHOOSEMENU"
                (iup-get-str-attribute self "TITLE") ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-info (self msg) (iup-info-low self "Info" (pix-load-static "48x48/dialog-information-2.png") msg 0))
(defnet iup-warning (self msg) (iup-info-low self $"Warning" (pix-load-static "48x48/dialog-important-2.png") msg 0))
(defnet iup-error (self msg) (iup-info-low self $"Error" (pix-load-static "48x48/dialog-error-4.png") msg 0))

(defnet iup-info60 (self msg) (iup-info-low self "Info" (pix-load-static "48x48/dialog-information-2.png") msg 60))
(defnet iup-warning60 (self msg) (iup-info-low self $"Warning" (pix-load-static "48x48/dialog-important-2.png") msg 60))
(defnet iup-error60 (self msg) (iup-info-low self $"Error" (pix-load-static "48x48/dialog-error-4.png") msg 60))

(defnet iup-info-low (self title pix msg maxlen)
        (deflocal q img hbox butbox dlg i)

        (set q (queue))

        (set i (iup-label))
        (set img (iup-image-rgba pix))
        (iup-set-attribute-handle i "IMAGE" img)
        (queue-put q img)

        (set msg (utf8-validate0 msg))
        (rtrim msg ' ' '\t' '\n' '\r')
        (if (> maxlen 0)
        then    (set msg (str-split msg maxlen)) )
        (inc msg nl)
        (set msg (iup-label msg))

        (set hbox (iup-hbox i msg))
        (iup-set-str-attribute hbox "ALIGNMENT" "ACENTER")
        (iup-set-int hbox "GAP" 14)

        (set butbox (iup-box-ok undef q))

        (set i (iup-vbox
                        hbox
                        butbox ))
        (iup-set-str-attribute i "MARGIN" "4x4")
        (iup-set-int i "GAP" 0)

        (set dlg (iup-dialog i))
        (iup-set-dlg-parent self dlg)
        (iup-set-str-attribute dlg "TITLE" (if (stringp title) title "Info"))
        (iup-set-bool dlg "DIALOGFRAME" true)
        (iup-set-attribute-handle dlg "DEFAULTENTER" (iup-box-ok-btn butbox))
        (iup-set-attribute-handle dlg "DEFAULTESC" (iup-box-ok-btn butbox))

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (close dlg)
        (iup-close-queue q) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-confirm (self msg) (iup-confirm-low self msg 0))

(defnet iup-confirm60 (self msg) (iup-confirm-low self msg 60))

(defnet iup-confirm-low (self msg maxlen)
        (deflocal q img hbox butbox dlg i)

        (set q (queue))

        (set i (iup-label))
        (set img (iup-image-rgba (pix-load-static "48x48/dialog-question-2.png")))
        (iup-set-attribute-handle i "IMAGE" img)
        (queue-put q img)

        (set msg (utf8-validate0 msg))
        (rtrim msg ' ' '\t' '\n' '\r')
        (if (> maxlen 0)
        then    (set msg (str-split msg maxlen)) )
        (inc msg nl)
        (set msg (iup-label msg))

        (set hbox (iup-hbox i msg))
        (iup-set-str-attribute hbox "ALIGNMENT" "ACENTER")
        (iup-set-int hbox "GAP" 14)

        (set butbox (iup-box-confirm-cancel undef undef q))

        (set i (iup-vbox
                        hbox
                        butbox ))
        (iup-set-str-attribute i "MARGIN" "4x4")
        (iup-set-int i "GAP" 0)

        (set dlg (iup-dialog i))
        (iup-set-dlg-parent self dlg)
        (iup-set-callback dlg "K_ANY" (netptr iup-confirm-cb))
        (iup-set-str-attribute dlg "TITLE" $"Confirmation request")
        (iup-set-bool dlg "DIALOGFRAME" true)
        ; notare che defaultenter è il pulsante annulla
        ; perché vogliamo che l`utente confermi cliccando sul pulsante conferma
        ;(iup-set-attribute-handle dlg "DEFAULTENTER" (iup-box-ok-cancel-btn-cancel butbox))
        ;(iup-set-attribute-handle dlg "DEFAULTESC" (iup-box-ok-cancel-btn-cancel butbox))
        (iup-set-int dlg "STATUS" 0)

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (set i (iup-get-int dlg "STATUS"))
        (close dlg)
        (iup-close-queue q)
        (= i 1) )

(defnet iup-confirm-cb (dlg c)
        (case c of
                (cmacro K_y)    (iup-ok-cb dlg)
                (cmacro K_s)    (iup-ok-cb dlg)
                (cmacro K_ESC)  (iup-cancel-cb dlg)
                (cmacro K_n)    (iup-cancel-cb dlg)
                default         (fail) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-edit-string (self title label @s)
        (iup-edit-string-low self title label false undef undef @s) )

(defnet iup-edit-string-with-mask (self title label mask @s)
        (iup-edit-string-low self title label false undef mask @s) )

(defnet iup-edit-password (self title label @s)
        (iup-edit-string-low self title label true undef undef @s) )

(defnet iup-edit-string-hints (self title label hints @s)
        (iup-edit-string-low self title label false hints undef @s) )

(defnet iup-edit-string-low (self title label password hints mask @s)
        (deflocal q text hbox butbox dlg i)

        (set q (queue))

        (set i (length hints))
        (if (and (integerp i) (> i 0))
        then    (set text (iup-list))
                (iup-set-bool text "DROPDOWN" true)
                (iup-set-bool text "EDITBOX" true)
                (for i in hints do
                        (iup-set-str-attribute text (+ (for-pos) 1) (utf8-validate0 i)) )
        else    (set text (iup-text))
                (iup-set-bool text "PASSWORD" password) )
        (if (stringp mask)
        then    (iup-set-str-attribute text "MASK" mask)
                (iup-set-int text "VISIBLECOLUMNS" 6)
        else    (iup-set-int text "VISIBLECOLUMNS" 40) )
        (iup-set-str-attribute text "VALUE" (if (stringp @s) (utf8-validate0 @s) ""))

        (if (not (stringp label))
        then    (set label (sprint label)) )
        (set label (utf8-validate0 label))
        (inc label ":")
        (if (search "\n" label)
        then    (inc label "\n") )
        (set hbox (iup-hbox (iup-label label) text))
        (iup-set-str-attribute hbox "ALIGNMENT" "ACENTER")
        (iup-set-int hbox "GAP" 10)

        (set butbox (iup-box-confirm-cancel undef undef q))

        (set i (iup-vbox
                        hbox
                        butbox ))
        (iup-set-str-attribute i "MARGIN" "4x4")
        (iup-set-int i "GAP" 0)

        (set dlg (iup-dialog i))
        (iup-set-dlg-parent self dlg)
        (iup-set-str-attribute dlg "TITLE" (if (stringp title) title $"Data input"))
        (iup-set-bool dlg "DIALOGFRAME" true)
        (iup-set-attribute-handle dlg "DEFAULTENTER" (iup-box-ok-cancel-btn-ok butbox))
        (iup-set-attribute-handle dlg "DEFAULTESC" (iup-box-ok-cancel-btn-cancel butbox))
        (iup-set-int dlg "STATUS" 0)

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (set i (iup-get-int dlg "STATUS"))
        (set @s (iup-get-str-attribute text "VALUE"))
        (close dlg)
        (iup-close-queue q)
        (= i 1) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-button-font (initial-font) net iup-button-font)
(defnet iup-button-font (initial-font @but)
        (set @but (iup-button))
        (iup-set-str-attribute @but "TRPFONT" initial-font)
        (iup-set-str-attribute @but "TITLE" initial-font)
        (iup-set-callback @but "ACTION" (netptr iup-button-font-cb)) )

(defun iup-button-font-value (but)
        (iup-get-str-attribute but "TRPFONT") )

(defnet iup-button-font-cb (but)
        (deflocal oldfont newfont)

        (opt    (set oldfont (iup-get-str-attribute but "TRPFONT"))
                (set newfont (iup-choose-font but oldfont))
                (stringp newfont)
                (<> newfont oldfont)
                (iup-set-str-attribute but "TRPFONT" newfont)
                (iup-set-str-attribute but "TITLE" newfont) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-button-color (initial-color) net iup-button-color)
(defnet iup-button-color (initial-color @but)
        (set @but (iup-button))
        (iup-set-str-attribute @but "BGCOLOR" (sprint (pix-color-red initial-color) " " (pix-color-green initial-color) " " (pix-color-blue initial-color)))
        (iup-set-str-attribute @but "RASTERSIZE" "32x32")
        (iup-set-callback @but "ACTION" (netptr iup-button-color-cb)) )

(defun iup-button-color-value (but)
        (iup-choose-color-parse (iup-get-str-attribute but "BGCOLOR")) )

(defnet iup-button-color-cb (but)
        (deflocal oldcolor newcolor)

        (opt    (set oldcolor (iup-button-color-value but))
                (set newcolor (iup-choose-color but oldcolor))
                (pixp newcolor)
                (<> newcolor oldcolor)
                (iup-set-str-attribute but "BGCOLOR" (sprint (pix-color-red newcolor) " " (pix-color-green newcolor) " " (pix-color-blue newcolor))) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-frame-with-margin (title wid) net iup-frame-with-margin)
(defnet iup-frame-with-margin (title wid @wid)
        (deflocal vbox hbox)

        (if (iup-gtk3)
        then    ; hack necessario per gtk3...
                (set hbox (iup-hbox))
                (iup-set-str-attribute hbox "MARGIN" "0x2")
                (set vbox (iup-vbox wid hbox))
        else    (set vbox (iup-vbox wid)) )
        (iup-set-str-attribute vbox "MARGIN" "2x2")
        (set @wid (iup-frame vbox))
        (iup-set-str-attribute @wid "TITLE" title)
        (iup-set-int @wid "MINSIZE" (ceil (* (utf8-length title) 9))) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun iup-text-spin (vmin vmax vcur) net iup-text-spin)
(defnet iup-text-spin (vmin vmax vcur @wid)
        (set @wid (iup-text))
        (iup-set-str-attribute @wid "MASK" "/d+")
        (iup-set-bool @wid "SPIN" true)
        (iup-set-int @wid "SPINMIN" vmin)
        (iup-set-int @wid "SPINMAX" vmax)
        (iup-set-int @wid "SPINVALUE" vcur) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

