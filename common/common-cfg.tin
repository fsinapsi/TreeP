;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet cfg-create-table ()
        (sqlite3-exec _db undef
                "CREATE TABLE config("
                        "key char unique not null,"
                        "value char not null)" ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet cfg-set (key val)
        (cfg-set-low _db key val) )

(defnet cfg-set-low (db key val)
        (set key (sqlite3-escape-strings key))
        (if (= val undef)
        then    (sqlite3-exec db undef
                        "DELETE FROM config WHERE key='" key "'" )
        else    (if (stringp val)
                then    (set val (sqlite3-escape-strings val)) )
                (alt    (sqlite3-exec db undef
                                "INSERT INTO config VALUES('" key "','" val "')" )
                        (sqlite3-exec db undef
                                "UPDATE config SET value='" val
                                "' WHERE key='" key "'" ))))

(defnet cfg-clr (key)
        (cfg-set key undef) )

(defnet cfg-inc (key val)
        (deflocal v)

        (set v (cfg-get-num key))
        (cfg-set key (+ (if (= v undef) 0 v) val)) )

(defun cfg-exists (key)
        (= (db-num-expr (+ "SELECT count(*) FROM config WHERE key=" (db-escape key))) 1) )

(defun cfg-get (key)
        (cfg-get-low _db key) )

(defun cfg-get-low (db key)
        <(sqlite3-exec db
                "SELECT value FROM config WHERE key='"
                (sqlite3-escape-strings key) "'" ) 0 0> )

(defun cfg-get-or-default (key default-info) net cfg-get-or-default)
(defnet cfg-get-or-default (key default-info @val)
        (set @val (cfg-get key))
        (if (= @val undef)
        then    (set @val <default-info key>) ))

(defun cfg-get-num (key)
        (cfg-validate-num (cfg-get key)) )

(defun cfg-get-or-default-num (key default-info)
        (cfg-validate-num (cfg-get-or-default key default-info)) )

(defun cfg-validate-num (val)
        (if (complexp val) val (str->num val)) )

(defun cfg-get-lang () net cfg-get-lang)
(defnet cfg-get-lang (@lang)
        (set @lang (cfg-get "lang"))
        (set @lang (if (= @lang undef) (lang) (cfg-validate-num @lang))) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

